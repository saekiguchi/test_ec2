<?php

namespace ContainerXhVx8uS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMonolog_Logger_AdminService extends Eccube_KernelProdContainer
{
    /*
     * Gets the public 'monolog.logger.admin' shared service.
     *
     * @return \Monolog\Logger
     */
    public static function do($container, $lazyLoad = true)
    {
        $container->services['monolog.logger.admin'] = $instance = new \Monolog\Logger('admin');

        $instance->pushProcessor(($container->privates['Eccube\\Log\\Processor\\SessionProcessor'] ?? self::getSessionProcessorService($container)));
        $instance->pushProcessor(($container->privates['Eccube\\Log\\Processor\\TokenProcessor'] ?? self::getTokenProcessorService($container)));
        $instance->pushProcessor(($container->privates['Monolog\\Processor\\UidProcessor'] ??= new \Monolog\Processor\UidProcessor()));
        $instance->pushProcessor(($container->privates['Monolog\\Processor\\IntrospectionProcessor'] ??= new \Monolog\Processor\IntrospectionProcessor(100, ['Eccube\\\\Log', 'Psr\\\\Log'])));
        $instance->pushProcessor(($container->privates['Symfony\\Bridge\\Monolog\\Processor\\WebProcessor'] ?? self::getWebProcessorService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.admin'] ?? self::getMonolog_Handler_AdminService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));

        return $instance;
    }
}
