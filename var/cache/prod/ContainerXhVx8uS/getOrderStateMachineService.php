<?php

namespace ContainerXhVx8uS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getOrderStateMachineService extends Eccube_KernelProdContainer
{
    /*
     * Gets the private 'Eccube\Service\OrderStateMachine' shared autowired service.
     *
     * @return \Eccube\Service\OrderStateMachine
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/OrderStateMachine.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PurchaseFlow/DiscountProcessor.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PurchaseFlow/PurchaseProcessor.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PurchaseFlow/Processor/PointProcessor.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PurchaseFlow/Processor/AbstractPurchaseProcessor.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PurchaseFlow/Processor/StockReduceProcessor.php';

        $a = ($container->privates['state_machine.order'] ?? self::getStateMachine_OrderService($container));

        if (isset($container->privates['Eccube\\Service\\OrderStateMachine'])) {
            return $container->privates['Eccube\\Service\\OrderStateMachine'];
        }
        $b = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        return $container->privates['Eccube\\Service\\OrderStateMachine'] = new \Eccube\Service\OrderStateMachine($a, ($container->privates['Eccube\\Repository\\Master\\OrderStatusRepository'] ?? $container->load('getOrderStatusRepositoryService')), new \Eccube\Service\PurchaseFlow\Processor\PointProcessor($b, ($container->privates['Eccube\\Service\\PointHelper'] ?? $container->load('getPointHelperService'))), new \Eccube\Service\PurchaseFlow\Processor\StockReduceProcessor(($container->privates['Eccube\\Repository\\ProductStockRepository'] ?? $container->load('getProductStockRepositoryService')), $b));
    }
}
