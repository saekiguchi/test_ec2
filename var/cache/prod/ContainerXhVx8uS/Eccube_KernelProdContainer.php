<?php

namespace ContainerXhVx8uS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class Eccube_KernelProdContainer extends Container
{
    protected $targetDir;
    protected $parameters = [];
    protected \Closure $getService;

    public function __construct(private array $buildParameters = [], protected string $containerDir = __DIR__)
    {
        $this->targetDir = \dirname($containerDir);
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->syntheticIds = [
            'kernel' => true,
        ];
        $this->methodMap = [
            'Detection\\MobileDetect' => 'getMobileDetectService',
            'Eccube\\Common\\EccubeConfig' => 'getEccubeConfigService',
            'Eccube\\Service\\SystemService' => 'getSystemServiceService',
            'cache.security_is_granted_attribute_expression_language' => 'getCache_SecurityIsGrantedAttributeExpressionLanguageService',
            'doctrine' => 'getDoctrineService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'event_dispatcher' => 'getEventDispatcherService',
            'http_kernel' => 'getHttpKernelService',
            'request_stack' => 'getRequestStackService',
            'router' => 'getRouterService',
            'translator' => 'getTranslatorService',
        ];
        $this->fileMap = [
            'Eccube\\Controller\\AbstractController' => 'getAbstractControllerService',
            'Eccube\\Controller\\AbstractShoppingController' => 'getAbstractShoppingControllerService',
            'Eccube\\Controller\\Admin\\AbstractCsvImportController' => 'getAbstractCsvImportControllerService',
            'Eccube\\Controller\\Admin\\AdminController' => 'getAdminControllerService',
            'Eccube\\Controller\\Admin\\Content\\BlockController' => 'getBlockControllerService',
            'Eccube\\Controller\\Admin\\Content\\CacheController' => 'getCacheControllerService',
            'Eccube\\Controller\\Admin\\Content\\CssController' => 'getCssControllerService',
            'Eccube\\Controller\\Admin\\Content\\FileController' => 'getFileControllerService',
            'Eccube\\Controller\\Admin\\Content\\JsController' => 'getJsControllerService',
            'Eccube\\Controller\\Admin\\Content\\LayoutController' => 'getLayoutControllerService',
            'Eccube\\Controller\\Admin\\Content\\MaintenanceController' => 'getMaintenanceControllerService',
            'Eccube\\Controller\\Admin\\Content\\NewsController' => 'getNewsControllerService',
            'Eccube\\Controller\\Admin\\Content\\PageController' => 'getPageControllerService',
            'Eccube\\Controller\\Admin\\Customer\\CustomerController' => 'getCustomerControllerService',
            'Eccube\\Controller\\Admin\\Customer\\CustomerDeliveryEditController' => 'getCustomerDeliveryEditControllerService',
            'Eccube\\Controller\\Admin\\Customer\\CustomerEditController' => 'getCustomerEditControllerService',
            'Eccube\\Controller\\Admin\\Order\\CsvImportController' => 'getCsvImportControllerService',
            'Eccube\\Controller\\Admin\\Order\\EditController' => 'getEditControllerService',
            'Eccube\\Controller\\Admin\\Order\\MailController' => 'getMailControllerService',
            'Eccube\\Controller\\Admin\\Order\\OrderController' => 'getOrderControllerService',
            'Eccube\\Controller\\Admin\\Order\\ShippingController' => 'getShippingControllerService',
            'Eccube\\Controller\\Admin\\Product\\CategoryController' => 'getCategoryControllerService',
            'Eccube\\Controller\\Admin\\Product\\ClassCategoryController' => 'getClassCategoryControllerService',
            'Eccube\\Controller\\Admin\\Product\\ClassNameController' => 'getClassNameControllerService',
            'Eccube\\Controller\\Admin\\Product\\CsvImportController' => 'getCsvImportController2Service',
            'Eccube\\Controller\\Admin\\Product\\ProductClassController' => 'getProductClassControllerService',
            'Eccube\\Controller\\Admin\\Product\\ProductController' => 'getProductControllerService',
            'Eccube\\Controller\\Admin\\Product\\TagController' => 'getTagControllerService',
            'Eccube\\Controller\\Admin\\Setting\\Shop\\CalendarController' => 'getCalendarControllerService',
            'Eccube\\Controller\\Admin\\Setting\\Shop\\CsvController' => 'getCsvControllerService',
            'Eccube\\Controller\\Admin\\Setting\\Shop\\DeliveryController' => 'getDeliveryControllerService',
            'Eccube\\Controller\\Admin\\Setting\\Shop\\MailController' => 'getMailController2Service',
            'Eccube\\Controller\\Admin\\Setting\\Shop\\OrderStatusController' => 'getOrderStatusControllerService',
            'Eccube\\Controller\\Admin\\Setting\\Shop\\PaymentController' => 'getPaymentControllerService',
            'Eccube\\Controller\\Admin\\Setting\\Shop\\ShopController' => 'getShopControllerService',
            'Eccube\\Controller\\Admin\\Setting\\Shop\\TaxRuleController' => 'getTaxRuleControllerService',
            'Eccube\\Controller\\Admin\\Setting\\Shop\\TradeLawController' => 'getTradeLawControllerService',
            'Eccube\\Controller\\Admin\\Setting\\System\\AuthorityController' => 'getAuthorityControllerService',
            'Eccube\\Controller\\Admin\\Setting\\System\\LogController' => 'getLogControllerService',
            'Eccube\\Controller\\Admin\\Setting\\System\\LoginHistoryController' => 'getLoginHistoryControllerService',
            'Eccube\\Controller\\Admin\\Setting\\System\\MasterdataController' => 'getMasterdataControllerService',
            'Eccube\\Controller\\Admin\\Setting\\System\\MemberController' => 'getMemberControllerService',
            'Eccube\\Controller\\Admin\\Setting\\System\\SecurityController' => 'getSecurityControllerService',
            'Eccube\\Controller\\Admin\\Setting\\System\\SystemController' => 'getSystemControllerService',
            'Eccube\\Controller\\Admin\\Setting\\System\\TwoFactorAuthController' => 'getTwoFactorAuthControllerService',
            'Eccube\\Controller\\Admin\\Store\\OwnerStoreController' => 'getOwnerStoreControllerService',
            'Eccube\\Controller\\Admin\\Store\\PluginController' => 'getPluginControllerService',
            'Eccube\\Controller\\Admin\\Store\\TemplateController' => 'getTemplateControllerService',
            'Eccube\\Controller\\Block\\AutoNewItemController' => 'getAutoNewItemControllerService',
            'Eccube\\Controller\\Block\\CalendarController' => 'getCalendarController2Service',
            'Eccube\\Controller\\Block\\CartController' => 'getCartControllerService',
            'Eccube\\Controller\\Block\\SearchProductController' => 'getSearchProductControllerService',
            'Eccube\\Controller\\CartController' => 'getCartController2Service',
            'Eccube\\Controller\\ContactController' => 'getContactControllerService',
            'Eccube\\Controller\\EntryController' => 'getEntryControllerService',
            'Eccube\\Controller\\ForgotController' => 'getForgotControllerService',
            'Eccube\\Controller\\HelpController' => 'getHelpControllerService',
            'Eccube\\Controller\\InstallPluginController' => 'getInstallPluginControllerService',
            'Eccube\\Controller\\Install\\InstallController' => 'getInstallControllerService',
            'Eccube\\Controller\\Mypage\\ChangeController' => 'getChangeControllerService',
            'Eccube\\Controller\\Mypage\\DeliveryController' => 'getDeliveryController2Service',
            'Eccube\\Controller\\Mypage\\MypageController' => 'getMypageControllerService',
            'Eccube\\Controller\\Mypage\\WithdrawController' => 'getWithdrawControllerService',
            'Eccube\\Controller\\NonMemberShoppingController' => 'getNonMemberShoppingControllerService',
            'Eccube\\Controller\\ProductController' => 'getProductController2Service',
            'Eccube\\Controller\\ShippingMultipleController' => 'getShippingMultipleControllerService',
            'Eccube\\Controller\\ShoppingController' => 'getShoppingControllerService',
            'Eccube\\Controller\\SitemapController' => 'getSitemapControllerService',
            'Eccube\\Controller\\TopController' => 'getTopControllerService',
            'Eccube\\Controller\\TradeLawController' => 'getTradeLawController2Service',
            'Eccube\\Controller\\UserDataController' => 'getUserDataControllerService',
            'Eccube\\DependencyInjection\\Facade\\AnnotationReaderFacade' => 'getAnnotationReaderFacadeService',
            'Eccube\\Repository\\PluginRepository' => 'getPluginRepositoryService',
            'Eccube\\Service\\Composer\\ComposerApiService' => 'getComposerApiServiceService',
            'Eccube\\Service\\Payment\\Method\\Cash' => 'getCashService',
            'Eccube\\Service\\PluginService' => 'getPluginServiceService',
            'Eccube\\Service\\TaxRuleService' => 'getTaxRuleServiceService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController' => 'getRedirectControllerService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController' => 'getTemplateController2Service',
            'cache.app' => 'getCache_AppService',
            'cache.app_clearer' => 'getCache_AppClearerService',
            'cache.global_clearer' => 'getCache_GlobalClearerService',
            'cache.rate_limiter' => 'getCache_RateLimiterService',
            'cache.system' => 'getCache_SystemService',
            'cache.system_clearer' => 'getCache_SystemClearerService',
            'cache.validator_expression_language' => 'getCache_ValidatorExpressionLanguageService',
            'cache_warmer' => 'getCacheWarmerService',
            'console.command.public_alias.Eccube\\Command\\UpdateSchemaDoctrineCommand' => 'getUpdateSchemaDoctrineCommandService',
            'console.command_loader' => 'getConsole_CommandLoaderService',
            'container.env_var_processors_locator' => 'getContainer_EnvVarProcessorsLocatorService',
            'container.get_routing_condition_service' => 'getContainer_GetRoutingConditionServiceService',
            'debug.error_handler_configurator' => 'getDebug_ErrorHandlerConfiguratorService',
            'eccube.logger' => 'getEccube_LoggerService',
            'error_controller' => 'getErrorControllerService',
            'knp_paginator' => 'getKnpPaginatorService',
            'monolog.logger.admin' => 'getMonolog_Logger_AdminService',
            'monolog.logger.front' => 'getMonolog_Logger_FrontService',
            'routing.loader' => 'getRouting_LoaderService',
            'services_resetter' => 'getServicesResetterService',
        ];
        $this->aliases = [
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
        ];

        $this->privates['service_container'] = static function ($container) {
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpKernelInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/KernelInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/RebootableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/TerminableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Kernel.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Kernel/MicroKernelTrait.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Kernel.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Doctrine/Query/Queries.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher/EventSubscriberInterface.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/EventListener/ForwardOnlyListener.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/EventListener/IpAddrListener.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/EventListener/LogListener.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/EventListener/MaintenanceListener.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/EventListener/MobileTemplatePathListener.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/EventListener/RateLimiterListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/container/src/ContainerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/service-contracts/ServiceProviderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/service-contracts/ServiceLocatorTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ServiceLocator.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/EventListener/RestrictFileUploadListener.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/EventListener/TransactionListener.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/EventListener/TwigInitializeListener.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/EventListener/TwoFactorAuthListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/persistence/src/Persistence/ObjectRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/collections/lib/Doctrine/Common/Collections/Selectable.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/EntityRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/Repository/ServiceEntityRepositoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/Repository/LazyServiceEntityRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/Repository/ServiceEntityRepository.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Repository/AbstractRepository.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Repository/AuthorityRoleRepository.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Repository/BaseInfoRepository.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Repository/BlockPositionRepository.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Repository/BlockRepository.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Repository/CartRepository.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Repository/LayoutRepository.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Repository/Master/DeviceTypeRepository.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Repository/OrderRepository.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Repository/PageLayoutRepository.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Repository/PageRepository.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Repository/ProductClassRepository.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Repository/ProductRepository.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Request/Context.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Service/TwoFactorAuthService.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/SessionInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/FlashBagAwareSessionInterface.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Session/Session.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/ExtensionInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/AbstractExtension.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Twig/Extension/EccubeExtension.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Twig/Extension/TaxExtension.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Common/EccubeConfig.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Formatter/FormatterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Log/Processor/SessionProcessor.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Log/Processor/TokenProcessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Processor/ProcessorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/ResettableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Processor/UidProcessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Processor/WebProcessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/monolog-bridge/Processor/WebProcessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/mobiledetect/mobiledetectlib/Mobile_Detect.php';
            include_once \dirname(__DIR__, 4).'/vendor/mobiledetect/mobiledetectlib/namespaced/Detection/MobileDetect.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/ControllerMetadata/ArgumentMetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/ControllerMetadata/ArgumentMetadataFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/ResponseListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/LocaleListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/ValidateRequestListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/ErrorListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/CacheAttributeListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ParameterBagInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ParameterBag.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/FrozenParameterBag.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ContainerBagInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ContainerBag.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/event-dispatcher/src/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher-contracts/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher/EventDispatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpKernel.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ControllerResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ControllerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ContainerControllerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/ControllerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/RequestStack.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/UriSigner.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/config/ConfigCacheFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/config/ResourceCheckerConfigCacheFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/LocaleAwareListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/cache/src/CacheItemPoolInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/AdapterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache-contracts/CacheInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/log/Psr/Log/LoggerAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/service-contracts/ResetInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/ResettableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/log/Psr/Log/LoggerAwareTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/AbstractAdapterTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache-contracts/CacheTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/ContractsTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/AbstractAdapter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Marshaller/MarshallerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Marshaller/DefaultMarshaller.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/Context/ContextInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/Context/RequestStackContext.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/VersionStrategy/VersionStrategyInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/VersionStrategy/EmptyVersionStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpCache/SurrogateInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpCache/AbstractSurrogate.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpCache/Esi.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/SurrogateListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/FragmentListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation-contracts/LocaleAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/LocaleSwitcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/workflow/WorkflowInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/workflow/Workflow.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/workflow/StateMachine.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/workflow/Definition.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/workflow/Transition.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/workflow/Metadata/MetadataStoreInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/workflow/Metadata/GetMetadataTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/workflow/Metadata/InMemoryMetadataStore.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/workflow/MarkingStore/MarkingStoreInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/workflow/MarkingStore/MethodMarkingStore.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/DebugHandlersListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/error-handler/ErrorRenderer/FileLinkFormatter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/stopwatch/Stopwatch.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/RequestContext.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/expression-language/ExpressionFunctionProviderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Matcher/ExpressionLanguageProvider.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/RouterListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-access/PropertyAccessorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-access/PropertyAccessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/SerializerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/NormalizerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ContextAwareNormalizerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DenormalizerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ContextAwareDenormalizerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/EncoderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/ContextAwareEncoderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/DecoderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/ContextAwareDecoderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Serializer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/SerializerAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/CacheableSupportsMethodInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/SerializerAwareTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/UnwrappingDenormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ProblemNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/UidNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/TranslatableNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DateTimeNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ConstraintViolationListNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/NameConverter/NameConverterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/NameConverter/AdvancedNameConverterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/NameConverter/MetadataAwareNameConverter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/MimeMessageNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ObjectToPopulateTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/AbstractNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/AbstractObjectNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/PropertyNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/ClassDiscriminatorResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/ClassDiscriminatorFromClassMetadata.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DateTimeZoneNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DateIntervalNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/FormErrorNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/BackedEnumNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DataUriNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/JsonSerializableNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DenormalizerAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DenormalizerAwareTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ArrayDenormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ObjectNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/NormalizationAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/XmlEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/JsonEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/YamlEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/CsvEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Factory/ClassMetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Factory/ClassResolverTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Factory/CacheClassMetadataFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Factory/ClassMetadataFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Loader/LoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Loader/LoaderChain.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Loader/AttributeLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/PruneableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/ProxyTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/PhpArrayAdapter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyTypeExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyDescriptionExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyAccessExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyListExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyInfoExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyInitializableExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyInfoCacheExtractor.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyInfoExtractor.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyReadInfoExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyWriteInfoExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/Extractor/ConstructorArgumentTypeExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/Extractor/ReflectionExtractor.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/FilesystemCommonTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/FilesystemTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/FilesystemAdapter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/AbstractSessionListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/SessionListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/TokenStorage/TokenStorageInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/TokenStorage/ClearableTokenStorageInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/TokenStorage/SessionTokenStorage.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/CsrfTokenManagerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/CsrfTokenManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/TokenGenerator/TokenGeneratorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/TokenGenerator/UriSafeTokenGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Mapping/Factory/MetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Validator/ValidatorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ValidatorBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Validation.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ContainerConstraintValidatorFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ObjectInitializerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/doctrine-bridge/Validator/DoctrineInitializer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Mapping/Loader/LoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Mapping/Loader/AutoMappingTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Mapping/Loader/PropertyInfoLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/doctrine-bridge/Validator/DoctrineLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/mime/MimeTypeGuesserInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/mime/MimeTypesInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/mime/MimeTypes.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/AuthorizationCheckerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/AuthorizationChecker.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authentication/Token/Storage/TokenStorageInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/service-contracts/ServiceSubscriberInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authentication/Token/Storage/UsageTrackingTokenStorage.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authentication/Token/Storage/TokenStorage.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authentication/AuthenticationTrustResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authentication/AuthenticationTrustResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/AccessDecisionManagerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/AccessDecisionManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/Strategy/AccessDecisionStrategyInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/Strategy/UnanimousStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Role/RoleHierarchyInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Role/RoleHierarchy.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-bundle/EventListener/FirewallListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/FirewallMapInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Security/FirewallMap.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Logout/LogoutUrlGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/EventListener/IsGrantedAttributeListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/expression-language/ExpressionLanguage.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/password-hasher/Hasher/PasswordHasherFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/password-hasher/Hasher/PasswordHasherFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/password-hasher/PasswordHasherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/password-hasher/LegacyPasswordHasherInterface.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Security/PasswordHasher/PasswordHasher.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall/FirewallListenerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall/AbstractListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall/ContextListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/RememberMe/ResponseListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/persistence/src/Persistence/ConnectionRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/persistence/src/Persistence/ManagerRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/persistence/src/Persistence/AbstractManagerRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/doctrine-bridge/ManagerRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/Registry.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/event-manager/src/EventManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/doctrine-bridge/ContainerAwareEventManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/src/Connection.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/ConnectionFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/src/Configuration.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/src/Schema/SchemaManagerFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/src/Schema/LegacySchemaManagerFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/src/Tools/DsnParser.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/EventListener/ControllerListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/EventListener/ParamConverterListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/Request/ParamConverter/ParamConverterManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/Request/ParamConverter/ParamConverterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/Request/ParamConverter/DoctrineParamConverter.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/Request/ParamConverter/DateTimeParamConverter.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/EventListener/TemplateListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/Templating/TemplateGuesser.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/EventListener/HttpCacheListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/EventListener/SecurityListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/ExpressionLanguage.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/Security/ExpressionLanguage.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/EventListener/IsGrantedListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/Request/ArgumentNameConverter.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/log/Psr/Log/LoggerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Logger.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/HandlerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/Handler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/ProcessableHandlerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/FormattableHandlerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/ProcessableHandlerTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/FormattableHandlerTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ActivationStrategyInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ErrorLevelActivationStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Processor/PsrLogMessageProcessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/monolog-bridge/Handler/CompatibilityHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/monolog-bridge/Handler/ConsoleHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/monolog-bridge/Handler/CompatibilityProcessingHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Cache/CacheInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Cache/FilesystemCache.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/CoreExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/EscaperExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/OptimizerExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/StagingExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/ExtensionSet.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Template.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/TemplateWrapper.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Environment.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Loader/LoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Loader/FilesystemLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/CsrfExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/LogoutUrlExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/SecurityExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Impersonate/ImpersonateUrlGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/TranslationExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/AssetExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/Packages.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/PackageInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/Package.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/PathPackage.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/CodeExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/RoutingExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/YamlExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/StopwatchExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/ExpressionExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/HttpKernelExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/HttpFoundationExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/UrlHelper.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/WorkflowExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/workflow/Registry.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/workflow/SupportStrategy/WorkflowSupportStrategyInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/workflow/SupportStrategy/InstanceOfSupportStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/SerializerExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/FormExtension.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Twig/Extension/CartServiceExtension.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Twig/Extension/CsrfExtension.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Twig/Extension/EccubeBlockExtension.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Twig/Extension/IgnoreTwigSandboxErrorExtension.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Twig/Extension/IntlExtension.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Twig/Extension/RepositoryExtension.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Twig/Extension/SafeTextmailEscaperExtension.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Twig/Extension/TemplateEventExtension.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Twig/Extension/TwigIncludeExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/StringLoaderExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/SandboxExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Sandbox/SecurityPolicyInterface.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Twig/Sandbox/SecurityPolicyDecorator.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Sandbox/SecurityPolicy.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/Twig/DoctrineExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/src/Twig/Extension/PaginationExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/src/Helper/Processor.php';
            include_once \dirname(__DIR__, 4).'/vendor/exercise/htmlpurifier-bundle/src/Twig/HTMLPurifierExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/intl-extra/IntlExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/AppVariable.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/RuntimeLoader/RuntimeLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/RuntimeLoader/ContainerRuntimeLoader.php';
            include_once \dirname(__DIR__, 4).'/src/Eccube/Twig/Extension/IgnoreRoutingNotFoundExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bundle/DependencyInjection/Configurator/EnvironmentConfigurator.php';
            include_once \dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/src/Subscriber/SlidingPaginationSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation-contracts/TranslatorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/TranslatorBagInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Translator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/WarmableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Translation/Translator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Formatter/MessageFormatterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Formatter/IntlFormatterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Formatter/MessageFormatter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation-contracts/TranslatorTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/IdentityTranslator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/RequestContextAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Matcher/UrlMatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Generator/UrlGeneratorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/RouterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Matcher/RequestMatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Router.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Routing/Router.php';
        };
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return require $this->containerDir.\DIRECTORY_SEPARATOR.'removed-ids.php';
    }

    protected function load($file, $lazyLoad = true): mixed
    {
        if (class_exists($class = __NAMESPACE__.'\\'.$file, false)) {
            return $class::do($this, $lazyLoad);
        }

        if ('.' === $file[-4]) {
            $class = substr($class, 0, -4);
        } else {
            $file .= '.php';
        }

        $service = require $this->containerDir.\DIRECTORY_SEPARATOR.$file;

        return class_exists($class, false) ? $class::do($this, $lazyLoad) : $service;
    }

    protected function createProxy($class, \Closure $factory)
    {
        class_exists($class, false) || require __DIR__.'/'.$class.'.php';

        return $factory();
    }

    /*
     * Gets the public 'Detection\MobileDetect' shared autowired service.
     *
     * @return \Detection\MobileDetect
     */
    protected static function getMobileDetectService($container)
    {
        return $container->services['Detection\\MobileDetect'] = new \Detection\MobileDetect();
    }

    /*
     * Gets the public 'Eccube\Common\EccubeConfig' shared autowired service.
     *
     * @return \Eccube\Common\EccubeConfig
     */
    protected static function getEccubeConfigService($container)
    {
        return $container->services['Eccube\\Common\\EccubeConfig'] = new \Eccube\Common\EccubeConfig(($container->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container)));
    }

    /*
     * Gets the public 'Eccube\Service\SystemService' shared autowired service.
     *
     * @return \Eccube\Service\SystemService
     */
    protected static function getSystemServiceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['Eccube\\Service\\SystemService'] = $container->createProxy('SystemServiceGhost5905d9d', static fn () => \SystemServiceGhost5905d9d::createLazyGhost(static fn ($proxy) => self::getSystemServiceService($container, $proxy)));
        }

        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/SystemService.php';

        return ($lazyLoad->__construct(($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container)), ($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container))) && false ?: $lazyLoad);
    }

    /*
     * Gets the public 'cache.security_is_granted_attribute_expression_language' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_SecurityIsGrantedAttributeExpressionLanguageService($container)
    {
        return $container->services['cache.security_is_granted_attribute_expression_language'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('m0OrE0Kh9m', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the public 'doctrine' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry
     */
    protected static function getDoctrineService($container)
    {
        return $container->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($container, $container->parameters['doctrine.connections'], $container->parameters['doctrine.entity_managers'], 'default', 'default');
    }

    /*
     * Gets the public 'doctrine.dbal.default_connection' shared service.
     *
     * @return \Doctrine\DBAL\Connection
     */
    protected static function getDoctrine_Dbal_DefaultConnectionService($container)
    {
        $a = ($container->privates['doctrine.dbal.default_connection.event_manager'] ?? self::getDoctrine_Dbal_DefaultConnection_EventManagerService($container));

        if (isset($container->services['doctrine.dbal.default_connection'])) {
            return $container->services['doctrine.dbal.default_connection'];
        }
        $b = new \Doctrine\DBAL\Configuration();
        $b->setSchemaManagerFactory(new \Doctrine\DBAL\Schema\LegacySchemaManagerFactory());
        $b->setMiddlewares([]);

        return $container->services['doctrine.dbal.default_connection'] = (new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory($container->parameters['doctrine.dbal.connection_factory.types'], new \Doctrine\DBAL\Tools\DsnParser(['db2' => 'ibm_db2', 'mssql' => 'pdo_sqlsrv', 'mysql' => 'pdo_mysql', 'mysql2' => 'pdo_mysql', 'postgres' => 'pdo_pgsql', 'postgresql' => 'pdo_pgsql', 'pgsql' => 'pdo_pgsql', 'sqlite' => 'pdo_sqlite', 'sqlite3' => 'pdo_sqlite'])))->createConnection(['driver' => 'pdo_sqlite', 'charset' => $container->getEnv('DATABASE_CHARSET'), 'url' => $container->getEnv('DATABASE_URL'), 'host' => 'localhost', 'port' => NULL, 'user' => 'root', 'password' => NULL, 'driverOptions' => [], 'serverVersion' => $container->getEnv('DATABASE_SERVER_VERSION'), 'defaultTableOptions' => ['charset' => 'utf8mb4', 'collation' => 'utf8mb4_bin']], $b, $a, []);
    }

    /*
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    protected static function getDoctrine_Orm_DefaultEntityManagerService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['doctrine.orm.default_entity_manager'] = $container->createProxy('EntityManagerGhostEc2b661', static fn () => \EntityManagerGhostEc2b661::createLazyGhost(static fn ($proxy) => self::getDoctrine_Orm_DefaultEntityManagerService($container, $proxy)));
        }

        include_once \dirname(__DIR__, 4).'/vendor/doctrine/common/src/Proxy/Autoloader.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Proxy/Autoloader.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/persistence/src/Persistence/ObjectManager.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/EntityManagerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/EntityManager.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Configuration.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Cache/CacheConfiguration.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Cache/CacheFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Cache/DefaultCacheFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Cache/RegionsConfiguration.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/Psr6/CacheAdapter.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/Cache.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/FlushableCache.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/ClearableCache.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/MultiGetCache.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/MultiDeleteCache.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/MultiPutCache.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/MultiOperationCache.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/CacheProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/Psr6/DoctrineProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/persistence/src/Persistence/Mapping/Driver/MappingDriver.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/Mapping/MappingDriver.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/persistence/src/Persistence/Mapping/Driver/MappingDriverChain.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/Driver/CompatibilityAnnotationDriver.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/persistence/src/Persistence/Mapping/Driver/ColocatedMappingDriver.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/Driver/ReflectionBasedDriver.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/Driver/AttributeDriver.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/Driver/AnnotationDriver.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Doctrine/ORM/Mapping/Driver/AnnotationDriver.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/NamingStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/UnderscoreNamingStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/QuoteStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Internal/SQLResultCasing.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/DefaultQuoteStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/EntityListenerResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/Mapping/EntityListenerServiceResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/Mapping/ContainerEntityListenerResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Repository/RepositoryFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/Repository/RepositoryFactoryCompatibility.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/Repository/ContainerRepositoryFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/ManagerConfigurator.php';

        $a = new \Doctrine\ORM\Configuration();

        $b = new \Doctrine\ORM\Cache\CacheConfiguration();

        $c = new \Doctrine\ORM\Cache\RegionsConfiguration(3600, 60);
        $d = \Doctrine\Common\Cache\Psr6\CacheAdapter::wrap(\Doctrine\Common\Cache\Psr6\DoctrineProvider::wrap(($container->privates['doctrine.app_cache_pool'] ?? self::getDoctrine_AppCachePoolService($container))));

        $b->setCacheFactory(new \Doctrine\ORM\Cache\DefaultCacheFactory($c, $d));
        $b->setRegionsConfiguration($c);
        $e = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();

        $f = ($container->privates['annotations.cached_reader'] ?? $container->load('getAnnotations_CachedReaderService'));

        $g = new \Eccube\Doctrine\ORM\Mapping\Driver\AnnotationDriver($f, [(\dirname(__DIR__, 4).'/src/Eccube/Entity')]);
        $g->setTraitProxiesDirectory((\dirname(__DIR__, 4).'/app/proxy/entity'));
        $h = new \Eccube\Doctrine\ORM\Mapping\Driver\AnnotationDriver($f, [(\dirname(__DIR__, 4).'/app/Plugin/Coupon42/Entity')]);
        $h->setTraitProxiesDirectory((\dirname(__DIR__, 4).'/app/proxy/entity'));
        $i = new \Eccube\Doctrine\ORM\Mapping\Driver\AnnotationDriver($f, [(\dirname(__DIR__, 4).'/app/Plugin/MailMagazine42/Entity')]);
        $i->setTraitProxiesDirectory((\dirname(__DIR__, 4).'/app/proxy/entity'));
        $j = new \Eccube\Doctrine\ORM\Mapping\Driver\AnnotationDriver($f, [(\dirname(__DIR__, 4).'/app/Plugin/ProductReview42/Entity')]);
        $j->setTraitProxiesDirectory((\dirname(__DIR__, 4).'/app/proxy/entity'));
        $k = new \Eccube\Doctrine\ORM\Mapping\Driver\AnnotationDriver($f, [(\dirname(__DIR__, 4).'/app/Plugin/Recommend42/Entity')]);
        $k->setTraitProxiesDirectory((\dirname(__DIR__, 4).'/app/proxy/entity'));
        $l = new \Eccube\Doctrine\ORM\Mapping\Driver\AnnotationDriver($f, [(\dirname(__DIR__, 4).'/app/Plugin/RelatedProduct42/Entity')]);
        $l->setTraitProxiesDirectory((\dirname(__DIR__, 4).'/app/proxy/entity'));
        $m = new \Eccube\Doctrine\ORM\Mapping\Driver\AnnotationDriver($f, [(\dirname(__DIR__, 4).'/app/Plugin/Securitychecker42/Entity')]);
        $m->setTraitProxiesDirectory((\dirname(__DIR__, 4).'/app/proxy/entity'));
        $n = new \Eccube\Doctrine\ORM\Mapping\Driver\AnnotationDriver($f, [(\dirname(__DIR__, 4).'/app/Plugin/SiteKit42/Entity')]);
        $n->setTraitProxiesDirectory((\dirname(__DIR__, 4).'/app/proxy/entity'));

        $e->addDriver(new \Doctrine\ORM\Mapping\Driver\AttributeDriver([(\dirname(__DIR__, 4).'/src/Eccube/Entity')], false), 'Eccube\\Entity');
        $e->addDriver($g, 'Eccube\\Entity');
        $e->addDriver(new \Doctrine\ORM\Mapping\Driver\AnnotationDriver($f, [(\dirname(__DIR__, 4).'/app/Customize/Entity')], false), 'Customize\\Entity');
        $e->addDriver($h, 'Plugin\\Coupon42\\Entity');
        $e->addDriver($i, 'Plugin\\MailMagazine42\\Entity');
        $e->addDriver($j, 'Plugin\\ProductReview42\\Entity');
        $e->addDriver($k, 'Plugin\\Recommend42\\Entity');
        $e->addDriver($l, 'Plugin\\RelatedProduct42\\Entity');
        $e->addDriver($m, 'Plugin\\Securitychecker42\\Entity');
        $e->addDriver($n, 'Plugin\\SiteKit42\\Entity');

        $a->setEntityNamespaces(['EccubeBundle' => 'Eccube\\Entity']);
        $a->setSecondLevelCacheEnabled(true);
        $a->setSecondLevelCacheConfiguration($b);
        $a->setMetadataCache($d);
        $a->setQueryCache($d);
        $a->setResultCache($d);
        $a->setMetadataDriverImpl(new \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver($e, new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'doctrine.ulid_generator' => ['privates', 'doctrine.ulid_generator', 'getDoctrine_UlidGeneratorService', true],
            'doctrine.uuid_generator' => ['privates', 'doctrine.uuid_generator', 'getDoctrine_UuidGeneratorService', true],
        ], [
            'doctrine.ulid_generator' => '?',
            'doctrine.uuid_generator' => '?',
        ])));
        $a->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $a->setProxyNamespace('Proxies');
        $a->setAutoGenerateProxyClasses(false);
        $a->setSchemaIgnoreClasses([]);
        $a->setClassMetadataFactoryName('Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ClassMetadataFactory');
        $a->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $a->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true));
        $a->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $a->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container));
        $a->setLazyGhostObjectEnabled(false);
        $a->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Eccube\\Repository\\AuthorityRoleRepository' => ['privates', 'Eccube\\Repository\\AuthorityRoleRepository', 'getAuthorityRoleRepositoryService', false],
            'Eccube\\Repository\\BaseInfoRepository' => ['privates', 'Eccube\\Repository\\BaseInfoRepository', 'getBaseInfoRepositoryService', false],
            'Eccube\\Repository\\BlockPositionRepository' => ['privates', 'Eccube\\Repository\\BlockPositionRepository', 'getBlockPositionRepositoryService', false],
            'Eccube\\Repository\\BlockRepository' => ['privates', 'Eccube\\Repository\\BlockRepository', 'getBlockRepositoryService', false],
            'Eccube\\Repository\\CalendarRepository' => ['privates', 'Eccube\\Repository\\CalendarRepository', 'getCalendarRepositoryService', true],
            'Eccube\\Repository\\CartItemRepository' => ['privates', 'Eccube\\Repository\\CartItemRepository', 'getCartItemRepositoryService', true],
            'Eccube\\Repository\\CartRepository' => ['privates', 'Eccube\\Repository\\CartRepository', 'getCartRepositoryService', false],
            'Eccube\\Repository\\CategoryRepository' => ['privates', 'Eccube\\Repository\\CategoryRepository', 'getCategoryRepositoryService', true],
            'Eccube\\Repository\\ClassCategoryRepository' => ['privates', 'Eccube\\Repository\\ClassCategoryRepository', 'getClassCategoryRepositoryService', true],
            'Eccube\\Repository\\ClassNameRepository' => ['privates', 'Eccube\\Repository\\ClassNameRepository', 'getClassNameRepositoryService', true],
            'Eccube\\Repository\\CsvRepository' => ['privates', 'Eccube\\Repository\\CsvRepository', 'getCsvRepositoryService', true],
            'Eccube\\Repository\\CustomerAddressRepository' => ['privates', 'Eccube\\Repository\\CustomerAddressRepository', 'getCustomerAddressRepositoryService', true],
            'Eccube\\Repository\\CustomerFavoriteProductRepository' => ['privates', 'Eccube\\Repository\\CustomerFavoriteProductRepository', 'getCustomerFavoriteProductRepositoryService', true],
            'Eccube\\Repository\\CustomerRepository' => ['privates', 'Eccube\\Repository\\CustomerRepository', 'getCustomerRepositoryService', true],
            'Eccube\\Repository\\DeliveryDurationRepository' => ['privates', 'Eccube\\Repository\\DeliveryDurationRepository', 'getDeliveryDurationRepositoryService', true],
            'Eccube\\Repository\\DeliveryFeeRepository' => ['privates', 'Eccube\\Repository\\DeliveryFeeRepository', 'getDeliveryFeeRepositoryService', true],
            'Eccube\\Repository\\DeliveryRepository' => ['privates', 'Eccube\\Repository\\DeliveryRepository', 'getDeliveryRepositoryService', true],
            'Eccube\\Repository\\DeliveryTimeRepository' => ['privates', 'Eccube\\Repository\\DeliveryTimeRepository', 'getDeliveryTimeRepositoryService', true],
            'Eccube\\Repository\\LayoutRepository' => ['privates', 'Eccube\\Repository\\LayoutRepository', 'getLayoutRepositoryService', false],
            'Eccube\\Repository\\LoginHistoryRepository' => ['privates', 'Eccube\\Repository\\LoginHistoryRepository', 'getLoginHistoryRepositoryService', true],
            'Eccube\\Repository\\MailHistoryRepository' => ['privates', 'Eccube\\Repository\\MailHistoryRepository', 'getMailHistoryRepositoryService', true],
            'Eccube\\Repository\\MailTemplateRepository' => ['privates', 'Eccube\\Repository\\MailTemplateRepository', 'getMailTemplateRepositoryService', true],
            'Eccube\\Repository\\Master\\AuthorityRepository' => ['privates', 'Eccube\\Repository\\Master\\AuthorityRepository', 'getAuthorityRepositoryService', true],
            'Eccube\\Repository\\Master\\CountryRepository' => ['privates', 'Eccube\\Repository\\Master\\CountryRepository', 'getCountryRepositoryService', true],
            'Eccube\\Repository\\Master\\CsvTypeRepository' => ['privates', 'Eccube\\Repository\\Master\\CsvTypeRepository', 'getCsvTypeRepositoryService', true],
            'Eccube\\Repository\\Master\\CustomerOrderStatusRepository' => ['privates', 'Eccube\\Repository\\Master\\CustomerOrderStatusRepository', 'getCustomerOrderStatusRepositoryService', true],
            'Eccube\\Repository\\Master\\CustomerStatusRepository' => ['privates', 'Eccube\\Repository\\Master\\CustomerStatusRepository', 'getCustomerStatusRepositoryService', true],
            'Eccube\\Repository\\Master\\DeviceTypeRepository' => ['privates', 'Eccube\\Repository\\Master\\DeviceTypeRepository', 'getDeviceTypeRepositoryService', false],
            'Eccube\\Repository\\Master\\JobRepository' => ['privates', 'Eccube\\Repository\\Master\\JobRepository', 'getJobRepositoryService', true],
            'Eccube\\Repository\\Master\\LoginHistoryStatusRepository' => ['privates', 'Eccube\\Repository\\Master\\LoginHistoryStatusRepository', 'getLoginHistoryStatusRepositoryService', true],
            'Eccube\\Repository\\Master\\OrderItemTypeRepository' => ['privates', 'Eccube\\Repository\\Master\\OrderItemTypeRepository', 'getOrderItemTypeRepositoryService', true],
            'Eccube\\Repository\\Master\\OrderStatusColorRepository' => ['privates', 'Eccube\\Repository\\Master\\OrderStatusColorRepository', 'getOrderStatusColorRepositoryService', true],
            'Eccube\\Repository\\Master\\OrderStatusRepository' => ['privates', 'Eccube\\Repository\\Master\\OrderStatusRepository', 'getOrderStatusRepositoryService', true],
            'Eccube\\Repository\\Master\\PageMaxRepository' => ['privates', 'Eccube\\Repository\\Master\\PageMaxRepository', 'getPageMaxRepositoryService', true],
            'Eccube\\Repository\\Master\\PrefRepository' => ['privates', 'Eccube\\Repository\\Master\\PrefRepository', 'getPrefRepositoryService', true],
            'Eccube\\Repository\\Master\\ProductListMaxRepository' => ['privates', 'Eccube\\Repository\\Master\\ProductListMaxRepository', 'getProductListMaxRepositoryService', true],
            'Eccube\\Repository\\Master\\ProductListOrderByRepository' => ['privates', 'Eccube\\Repository\\Master\\ProductListOrderByRepository', 'getProductListOrderByRepositoryService', true],
            'Eccube\\Repository\\Master\\ProductStatusRepository' => ['privates', 'Eccube\\Repository\\Master\\ProductStatusRepository', 'getProductStatusRepositoryService', true],
            'Eccube\\Repository\\Master\\RoundingTypeRepository' => ['privates', 'Eccube\\Repository\\Master\\RoundingTypeRepository', 'getRoundingTypeRepositoryService', true],
            'Eccube\\Repository\\Master\\SaleTypeRepository' => ['privates', 'Eccube\\Repository\\Master\\SaleTypeRepository', 'getSaleTypeRepositoryService', true],
            'Eccube\\Repository\\Master\\SexRepository' => ['privates', 'Eccube\\Repository\\Master\\SexRepository', 'getSexRepositoryService', true],
            'Eccube\\Repository\\Master\\TaxDisplayTypeRepository' => ['privates', 'Eccube\\Repository\\Master\\TaxDisplayTypeRepository', 'getTaxDisplayTypeRepositoryService', true],
            'Eccube\\Repository\\Master\\TaxTypeRepository' => ['privates', 'Eccube\\Repository\\Master\\TaxTypeRepository', 'getTaxTypeRepositoryService', true],
            'Eccube\\Repository\\Master\\WorkRepository' => ['privates', 'Eccube\\Repository\\Master\\WorkRepository', 'getWorkRepositoryService', true],
            'Eccube\\Repository\\MemberRepository' => ['privates', 'Eccube\\Repository\\MemberRepository', 'getMemberRepositoryService', true],
            'Eccube\\Repository\\NewsRepository' => ['privates', 'Eccube\\Repository\\NewsRepository', 'getNewsRepositoryService', true],
            'Eccube\\Repository\\OrderItemRepository' => ['privates', 'Eccube\\Repository\\OrderItemRepository', 'getOrderItemRepositoryService', true],
            'Eccube\\Repository\\OrderPdfRepository' => ['privates', 'Eccube\\Repository\\OrderPdfRepository', 'getOrderPdfRepositoryService', true],
            'Eccube\\Repository\\OrderRepository' => ['privates', 'Eccube\\Repository\\OrderRepository', 'getOrderRepositoryService', false],
            'Eccube\\Repository\\PageLayoutRepository' => ['privates', 'Eccube\\Repository\\PageLayoutRepository', 'getPageLayoutRepositoryService', false],
            'Eccube\\Repository\\PageRepository' => ['privates', 'Eccube\\Repository\\PageRepository', 'getPageRepositoryService', false],
            'Eccube\\Repository\\PaymentOptionRepository' => ['privates', 'Eccube\\Repository\\PaymentOptionRepository', 'getPaymentOptionRepositoryService', true],
            'Eccube\\Repository\\PaymentRepository' => ['privates', 'Eccube\\Repository\\PaymentRepository', 'getPaymentRepositoryService', true],
            'Eccube\\Repository\\PluginRepository' => ['services', 'Eccube\\Repository\\PluginRepository', 'getPluginRepositoryService', true],
            'Eccube\\Repository\\ProductCategoryRepository' => ['privates', 'Eccube\\Repository\\ProductCategoryRepository', 'getProductCategoryRepositoryService', true],
            'Eccube\\Repository\\ProductClassRepository' => ['privates', 'Eccube\\Repository\\ProductClassRepository', 'getProductClassRepositoryService', false],
            'Eccube\\Repository\\ProductImageRepository' => ['privates', 'Eccube\\Repository\\ProductImageRepository', 'getProductImageRepositoryService', true],
            'Eccube\\Repository\\ProductRepository' => ['privates', 'Eccube\\Repository\\ProductRepository', 'getProductRepositoryService', false],
            'Eccube\\Repository\\ProductStockRepository' => ['privates', 'Eccube\\Repository\\ProductStockRepository', 'getProductStockRepositoryService', true],
            'Eccube\\Repository\\ProductTagRepository' => ['privates', 'Eccube\\Repository\\ProductTagRepository', 'getProductTagRepositoryService', true],
            'Eccube\\Repository\\ShippingRepository' => ['privates', 'Eccube\\Repository\\ShippingRepository', 'getShippingRepositoryService', true],
            'Eccube\\Repository\\TagRepository' => ['privates', 'Eccube\\Repository\\TagRepository', 'getTagRepositoryService', true],
            'Eccube\\Repository\\TaxRuleRepository' => ['privates', 'Eccube\\Repository\\TaxRuleRepository', 'getTaxRuleRepositoryService', false],
            'Eccube\\Repository\\TemplateRepository' => ['privates', 'Eccube\\Repository\\TemplateRepository', 'getTemplateRepositoryService', true],
            'Eccube\\Repository\\TradeLawRepository' => ['privates', 'Eccube\\Repository\\TradeLawRepository', 'getTradeLawRepositoryService', true],
            'Plugin\\Coupon42\\Repository\\CouponDetailRepository' => ['privates', 'Plugin\\Coupon42\\Repository\\CouponDetailRepository', 'getCouponDetailRepositoryService', true],
            'Plugin\\Coupon42\\Repository\\CouponOrderRepository' => ['privates', 'Plugin\\Coupon42\\Repository\\CouponOrderRepository', 'getCouponOrderRepositoryService', true],
            'Plugin\\Coupon42\\Repository\\CouponRepository' => ['privates', 'Plugin\\Coupon42\\Repository\\CouponRepository', 'getCouponRepositoryService', true],
            'Plugin\\MailMagazine42\\Repository\\MailMagazineSendHistoryRepository' => ['privates', 'Plugin\\MailMagazine42\\Repository\\MailMagazineSendHistoryRepository', 'getMailMagazineSendHistoryRepositoryService', true],
            'Plugin\\MailMagazine42\\Repository\\MailMagazineTemplateRepository' => ['privates', 'Plugin\\MailMagazine42\\Repository\\MailMagazineTemplateRepository', 'getMailMagazineTemplateRepositoryService', true],
            'Plugin\\ProductReview42\\Repository\\ProductReviewConfigRepository' => ['privates', 'Plugin\\ProductReview42\\Repository\\ProductReviewConfigRepository', 'getProductReviewConfigRepositoryService', true],
            'Plugin\\ProductReview42\\Repository\\ProductReviewRepository' => ['privates', 'Plugin\\ProductReview42\\Repository\\ProductReviewRepository', 'getProductReviewRepositoryService', true],
            'Plugin\\ProductReview42\\Repository\\ProductReviewStatusRepository' => ['privates', 'Plugin\\ProductReview42\\Repository\\ProductReviewStatusRepository', 'getProductReviewStatusRepositoryService', true],
            'Plugin\\Recommend42\\Repository\\RecommendProductRepository' => ['privates', 'Plugin\\Recommend42\\Repository\\RecommendProductRepository', 'getRecommendProductRepositoryService', true],
            'Plugin\\RelatedProduct42\\Repository\\RelatedProductRepository' => ['privates', 'Plugin\\RelatedProduct42\\Repository\\RelatedProductRepository', 'getRelatedProductRepositoryService', true],
            'Plugin\\Securitychecker42\\Repository\\ConfigRepository' => ['privates', 'Plugin\\Securitychecker42\\Repository\\ConfigRepository', 'getConfigRepositoryService', true],
            'Plugin\\SiteKit42\\Repository\\IdTokenRepository' => ['privates', 'Plugin\\SiteKit42\\Repository\\IdTokenRepository', 'getIdTokenRepositoryService', true],
        ], [
            'Eccube\\Repository\\AuthorityRoleRepository' => '?',
            'Eccube\\Repository\\BaseInfoRepository' => '?',
            'Eccube\\Repository\\BlockPositionRepository' => '?',
            'Eccube\\Repository\\BlockRepository' => '?',
            'Eccube\\Repository\\CalendarRepository' => '?',
            'Eccube\\Repository\\CartItemRepository' => '?',
            'Eccube\\Repository\\CartRepository' => '?',
            'Eccube\\Repository\\CategoryRepository' => '?',
            'Eccube\\Repository\\ClassCategoryRepository' => '?',
            'Eccube\\Repository\\ClassNameRepository' => '?',
            'Eccube\\Repository\\CsvRepository' => '?',
            'Eccube\\Repository\\CustomerAddressRepository' => '?',
            'Eccube\\Repository\\CustomerFavoriteProductRepository' => '?',
            'Eccube\\Repository\\CustomerRepository' => '?',
            'Eccube\\Repository\\DeliveryDurationRepository' => '?',
            'Eccube\\Repository\\DeliveryFeeRepository' => '?',
            'Eccube\\Repository\\DeliveryRepository' => '?',
            'Eccube\\Repository\\DeliveryTimeRepository' => '?',
            'Eccube\\Repository\\LayoutRepository' => '?',
            'Eccube\\Repository\\LoginHistoryRepository' => '?',
            'Eccube\\Repository\\MailHistoryRepository' => '?',
            'Eccube\\Repository\\MailTemplateRepository' => '?',
            'Eccube\\Repository\\Master\\AuthorityRepository' => '?',
            'Eccube\\Repository\\Master\\CountryRepository' => '?',
            'Eccube\\Repository\\Master\\CsvTypeRepository' => '?',
            'Eccube\\Repository\\Master\\CustomerOrderStatusRepository' => '?',
            'Eccube\\Repository\\Master\\CustomerStatusRepository' => '?',
            'Eccube\\Repository\\Master\\DeviceTypeRepository' => '?',
            'Eccube\\Repository\\Master\\JobRepository' => '?',
            'Eccube\\Repository\\Master\\LoginHistoryStatusRepository' => '?',
            'Eccube\\Repository\\Master\\OrderItemTypeRepository' => '?',
            'Eccube\\Repository\\Master\\OrderStatusColorRepository' => '?',
            'Eccube\\Repository\\Master\\OrderStatusRepository' => '?',
            'Eccube\\Repository\\Master\\PageMaxRepository' => '?',
            'Eccube\\Repository\\Master\\PrefRepository' => '?',
            'Eccube\\Repository\\Master\\ProductListMaxRepository' => '?',
            'Eccube\\Repository\\Master\\ProductListOrderByRepository' => '?',
            'Eccube\\Repository\\Master\\ProductStatusRepository' => '?',
            'Eccube\\Repository\\Master\\RoundingTypeRepository' => '?',
            'Eccube\\Repository\\Master\\SaleTypeRepository' => '?',
            'Eccube\\Repository\\Master\\SexRepository' => '?',
            'Eccube\\Repository\\Master\\TaxDisplayTypeRepository' => '?',
            'Eccube\\Repository\\Master\\TaxTypeRepository' => '?',
            'Eccube\\Repository\\Master\\WorkRepository' => '?',
            'Eccube\\Repository\\MemberRepository' => '?',
            'Eccube\\Repository\\NewsRepository' => '?',
            'Eccube\\Repository\\OrderItemRepository' => '?',
            'Eccube\\Repository\\OrderPdfRepository' => '?',
            'Eccube\\Repository\\OrderRepository' => '?',
            'Eccube\\Repository\\PageLayoutRepository' => '?',
            'Eccube\\Repository\\PageRepository' => '?',
            'Eccube\\Repository\\PaymentOptionRepository' => '?',
            'Eccube\\Repository\\PaymentRepository' => '?',
            'Eccube\\Repository\\PluginRepository' => '?',
            'Eccube\\Repository\\ProductCategoryRepository' => '?',
            'Eccube\\Repository\\ProductClassRepository' => '?',
            'Eccube\\Repository\\ProductImageRepository' => '?',
            'Eccube\\Repository\\ProductRepository' => '?',
            'Eccube\\Repository\\ProductStockRepository' => '?',
            'Eccube\\Repository\\ProductTagRepository' => '?',
            'Eccube\\Repository\\ShippingRepository' => '?',
            'Eccube\\Repository\\TagRepository' => '?',
            'Eccube\\Repository\\TaxRuleRepository' => '?',
            'Eccube\\Repository\\TemplateRepository' => '?',
            'Eccube\\Repository\\TradeLawRepository' => '?',
            'Plugin\\Coupon42\\Repository\\CouponDetailRepository' => '?',
            'Plugin\\Coupon42\\Repository\\CouponOrderRepository' => '?',
            'Plugin\\Coupon42\\Repository\\CouponRepository' => '?',
            'Plugin\\MailMagazine42\\Repository\\MailMagazineSendHistoryRepository' => '?',
            'Plugin\\MailMagazine42\\Repository\\MailMagazineTemplateRepository' => '?',
            'Plugin\\ProductReview42\\Repository\\ProductReviewConfigRepository' => '?',
            'Plugin\\ProductReview42\\Repository\\ProductReviewRepository' => '?',
            'Plugin\\ProductReview42\\Repository\\ProductReviewStatusRepository' => '?',
            'Plugin\\Recommend42\\Repository\\RecommendProductRepository' => '?',
            'Plugin\\RelatedProduct42\\Repository\\RelatedProductRepository' => '?',
            'Plugin\\Securitychecker42\\Repository\\ConfigRepository' => '?',
            'Plugin\\SiteKit42\\Repository\\IdTokenRepository' => '?',
        ])));
        $a->addCustomStringFunction('NORMALIZE', 'Eccube\\Doctrine\\ORM\\Query\\Normalize');
        $a->addCustomNumericFunction('EXTRACT', 'Eccube\\Doctrine\\ORM\\Query\\Extract');
        $a->addFilter('option_nostock_hidden', 'Eccube\\Doctrine\\Filter\\NoStockHiddenFilter');
        $a->addFilter('incomplete_order_status_hidden', 'Eccube\\Doctrine\\Filter\\OrderStatusFilter');

        $instance = ($lazyLoad->__construct(($container->services['doctrine.dbal.default_connection'] ?? self::getDoctrine_Dbal_DefaultConnectionService($container)), $a, ($container->privates['doctrine.dbal.default_connection.event_manager'] ?? self::getDoctrine_Dbal_DefaultConnection_EventManagerService($container))) && false ?: $lazyLoad);

        (new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }

    /*
     * Gets the public 'event_dispatcher' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected static function getEventDispatcherService($container)
    {
        $container->services['event_dispatcher'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('kernel.request', [#[\Closure(name: 'Symfony\\Bridge\\Monolog\\Processor\\WebProcessor')] fn () => ($container->privates['Symfony\\Bridge\\Monolog\\Processor\\WebProcessor'] ?? self::getWebProcessorService($container)), 'onKernelRequest'], 1024);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.user_provider'] ?? $container->load('getSecurity_Listener_UserProviderService')), 'checkPassport'], 1024);
        $instance->addListener('kernel.response', [#[\Closure(name: 'security.context_listener.0', class: 'Symfony\\Component\\Security\\Http\\Firewall\\ContextListener')] fn () => ($container->privates['security.context_listener.0'] ?? self::getSecurity_ContextListener_0Service($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'security.context_listener.1', class: 'Symfony\\Component\\Security\\Http\\Firewall\\ContextListener')] fn () => ($container->privates['security.context_listener.1'] ?? self::getSecurity_ContextListener_1Service($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'knp_paginator.subscriber.sliding_pagination', class: 'Knp\\Bundle\\PaginatorBundle\\Subscriber\\SlidingPaginationSubscriber')] fn () => ($container->privates['knp_paginator.subscriber.sliding_pagination'] ?? self::getKnpPaginator_Subscriber_SlidingPaginationService($container)), 'onKernelRequest'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'Eccube\\EventListener\\ExceptionListener')] fn () => ($container->privates['Eccube\\EventListener\\ExceptionListener'] ?? $container->load('getExceptionListenerService')), 'onKernelException'], 0);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'Eccube\\EventListener\\ForwardOnlyListener')] fn () => ($container->privates['Eccube\\EventListener\\ForwardOnlyListener'] ??= new \Eccube\EventListener\ForwardOnlyListener()), 'onController'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Eccube\\EventListener\\IpAddrListener')] fn () => ($container->privates['Eccube\\EventListener\\IpAddrListener'] ?? self::getIpAddrListenerService($container)), 'onKernelRequest'], 512);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Eccube\\EventListener\\LogListener')] fn () => ($container->privates['Eccube\\EventListener\\LogListener'] ?? self::getLogListenerService($container)), 'onKernelRequestEarly'], 500);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Eccube\\EventListener\\LogListener')] fn () => ($container->privates['Eccube\\EventListener\\LogListener'] ?? self::getLogListenerService($container)), 'onKernelRequest'], 6);
        $instance->addListener('kernel.response', [#[\Closure(name: 'Eccube\\EventListener\\LogListener')] fn () => ($container->privates['Eccube\\EventListener\\LogListener'] ?? self::getLogListenerService($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'Eccube\\EventListener\\LogListener')] fn () => ($container->privates['Eccube\\EventListener\\LogListener'] ?? self::getLogListenerService($container)), 'onKernelController'], 0);
        $instance->addListener('kernel.terminate', [#[\Closure(name: 'Eccube\\EventListener\\LogListener')] fn () => ($container->privates['Eccube\\EventListener\\LogListener'] ?? self::getLogListenerService($container)), 'onKernelTerminate'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'Eccube\\EventListener\\LogListener')] fn () => ($container->privates['Eccube\\EventListener\\LogListener'] ?? self::getLogListenerService($container)), 'onKernelException'], -4);
        $instance->addListener('security.interactive_login', [#[\Closure(name: 'Eccube\\EventListener\\LoginHistoryListener')] fn () => ($container->privates['Eccube\\EventListener\\LoginHistoryListener'] ?? $container->load('getLoginHistoryListenerService')), 'onInteractiveLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent', [#[\Closure(name: 'Eccube\\EventListener\\LoginHistoryListener')] fn () => ($container->privates['Eccube\\EventListener\\LoginHistoryListener'] ?? $container->load('getLoginHistoryListenerService')), 'onAuthenticationFailure'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'Eccube\\EventListener\\MaintenanceListener')] fn () => ($container->privates['Eccube\\EventListener\\MaintenanceListener'] ?? self::getMaintenanceListenerService($container)), 'onResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Eccube\\EventListener\\MobileTemplatePathListener')] fn () => ($container->privates['Eccube\\EventListener\\MobileTemplatePathListener'] ?? self::getMobileTemplatePathListenerService($container)), 'onKernelRequest'], 512);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'Eccube\\EventListener\\RateLimiterListener')] fn () => ($container->privates['Eccube\\EventListener\\RateLimiterListener'] ?? self::getRateLimiterListenerService($container)), 'onController'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Eccube\\EventListener\\RestrictFileUploadListener')] fn () => ($container->privates['Eccube\\EventListener\\RestrictFileUploadListener'] ?? self::getRestrictFileUploadListenerService($container)), 'onKernelRequest'], 7);
        $instance->addListener('security.interactive_login', [#[\Closure(name: 'Eccube\\EventListener\\SecurityListener')] fn () => ($container->privates['Eccube\\EventListener\\SecurityListener'] ?? $container->load('getSecurityListenerService')), 'onInteractiveLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent', [#[\Closure(name: 'Eccube\\EventListener\\SecurityListener')] fn () => ($container->privates['Eccube\\EventListener\\SecurityListener'] ?? $container->load('getSecurityListenerService')), 'onAuthenticationFailure'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Eccube\\EventListener\\TransactionListener')] fn () => ($container->privates['Eccube\\EventListener\\TransactionListener'] ?? self::getTransactionListenerService($container)), 'onKernelRequest'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'Eccube\\EventListener\\TransactionListener')] fn () => ($container->privates['Eccube\\EventListener\\TransactionListener'] ?? self::getTransactionListenerService($container)), 'onKernelException'], 0);
        $instance->addListener('kernel.terminate', [#[\Closure(name: 'Eccube\\EventListener\\TransactionListener')] fn () => ($container->privates['Eccube\\EventListener\\TransactionListener'] ?? self::getTransactionListenerService($container)), 'onKernelTerminate'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Eccube\\EventListener\\TwigInitializeListener')] fn () => ($container->privates['Eccube\\EventListener\\TwigInitializeListener'] ?? self::getTwigInitializeListenerService($container)), 'onKernelRequest'], 6);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'Eccube\\EventListener\\TwoFactorAuthListener')] fn () => ($container->privates['Eccube\\EventListener\\TwoFactorAuthListener'] ?? self::getTwoFactorAuthListenerService($container)), 'onKernelController'], 7);
        $instance->addListener('form.pre_submit', [#[\Closure(name: 'Eccube\\Form\\EventListener\\ConvertKanaListener')] fn () => ($container->privates['Eccube\\Form\\EventListener\\ConvertKanaListener'] ??= new \Eccube\Form\EventListener\ConvertKanaListener()), 'onPreSubmit'], 0);
        $instance->addListener('form.pre_submit', [#[\Closure(name: 'Eccube\\Form\\EventListener\\HTMLPurifierListener')] fn () => ($container->privates['Eccube\\Form\\EventListener\\HTMLPurifierListener'] ??= new \Eccube\Form\EventListener\HTMLPurifierListener()), 'purifySubmittedData'], 1000001);
        $instance->addListener('form.pre_submit', [#[\Closure(name: 'Eccube\\Form\\EventListener\\TruncateHyphenListener')] fn () => ($container->privates['Eccube\\Form\\EventListener\\TruncateHyphenListener'] ??= new \Eccube\Form\EventListener\TruncateHyphenListener()), 'onPreSubmit'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'Eccube\\Security\\Http\\Authentication\\EccubeLogoutSuccessHandler')] fn () => ($container->privates['Eccube\\Security\\Http\\Authentication\\EccubeLogoutSuccessHandler'] ?? $container->load('getEccubeLogoutSuccessHandlerService')), 'onLogout'], 0);
        $instance->addListener('workflow.order.completed', [#[\Closure(name: 'Eccube\\Service\\OrderStateMachine')] fn () => ($container->privates['Eccube\\Service\\OrderStateMachine'] ?? $container->load('getOrderStateMachineService')), 'onCompleted'], 0);
        $instance->addListener('workflow.order.transition.pay', [#[\Closure(name: 'Eccube\\Service\\OrderStateMachine')] fn () => ($container->privates['Eccube\\Service\\OrderStateMachine'] ?? $container->load('getOrderStateMachineService')), 'updatePaymentDate'], 0);
        $instance->addListener('workflow.order.transition.cancel', [#[\Closure(name: 'Eccube\\Service\\OrderStateMachine')] fn () => ($container->privates['Eccube\\Service\\OrderStateMachine'] ?? $container->load('getOrderStateMachineService')), 'rollbackStock'], 0);
        $instance->addListener('workflow.order.transition.cancel', [#[\Closure(name: 'Eccube\\Service\\OrderStateMachine')] fn () => ($container->privates['Eccube\\Service\\OrderStateMachine'] ?? $container->load('getOrderStateMachineService')), 'rollbackUsePoint'], 0);
        $instance->addListener('workflow.order.transition.back_to_in_progress', [#[\Closure(name: 'Eccube\\Service\\OrderStateMachine')] fn () => ($container->privates['Eccube\\Service\\OrderStateMachine'] ?? $container->load('getOrderStateMachineService')), 'commitStock'], 0);
        $instance->addListener('workflow.order.transition.back_to_in_progress', [#[\Closure(name: 'Eccube\\Service\\OrderStateMachine')] fn () => ($container->privates['Eccube\\Service\\OrderStateMachine'] ?? $container->load('getOrderStateMachineService')), 'commitUsePoint'], 0);
        $instance->addListener('workflow.order.transition.ship', [#[\Closure(name: 'Eccube\\Service\\OrderStateMachine')] fn () => ($container->privates['Eccube\\Service\\OrderStateMachine'] ?? $container->load('getOrderStateMachineService')), 'commitAddPoint'], 0);
        $instance->addListener('workflow.order.transition.return', [#[\Closure(name: 'Eccube\\Service\\OrderStateMachine')] fn () => ($container->privates['Eccube\\Service\\OrderStateMachine'] ?? $container->load('getOrderStateMachineService')), 'rollbackUsePoint'], 0);
        $instance->addListener('workflow.order.transition.return', [#[\Closure(name: 'Eccube\\Service\\OrderStateMachine')] fn () => ($container->privates['Eccube\\Service\\OrderStateMachine'] ?? $container->load('getOrderStateMachineService')), 'rollbackAddPoint'], 0);
        $instance->addListener('workflow.order.transition.cancel_return', [#[\Closure(name: 'Eccube\\Service\\OrderStateMachine')] fn () => ($container->privates['Eccube\\Service\\OrderStateMachine'] ?? $container->load('getOrderStateMachineService')), 'commitUsePoint'], 0);
        $instance->addListener('workflow.order.transition.cancel_return', [#[\Closure(name: 'Eccube\\Service\\OrderStateMachine')] fn () => ($container->privates['Eccube\\Service\\OrderStateMachine'] ?? $container->load('getOrderStateMachineService')), 'commitAddPoint'], 0);
        $instance->addListener('kernel.terminate', [#[\Closure(name: 'Eccube\\Service\\SystemService')] fn () => ($container->services['Eccube\\Service\\SystemService'] ?? self::getSystemServiceService($container)), 'disableMaintenanceEvent'], 0);
        $instance->addListener('kernel.terminate', [#[\Closure(name: 'Eccube\\Util\\CacheUtil')] fn () => ($container->privates['Eccube\\Util\\CacheUtil'] ?? $container->load('getCacheUtilService')), 'forceClearCache'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'eccube.security.logout.success_handler', class: 'Eccube\\Security\\Http\\Authentication\\EccubeLogoutSuccessHandler')] fn () => ($container->privates['eccube.security.logout.success_handler'] ?? $container->load('getEccube_Security_Logout_SuccessHandlerService')), 'onLogout'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Symfony\\Bridge\\Monolog\\Processor\\WebProcessor')] fn () => ($container->privates['Symfony\\Bridge\\Monolog\\Processor\\WebProcessor'] ?? self::getWebProcessorService($container)), 'onKernelRequest'], 4096);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'argument_resolver.request_payload', class: 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver')] fn () => ($container->privates['argument_resolver.request_payload'] ?? self::getArgumentResolver_RequestPayloadService($container)), 'onKernelControllerArguments'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'response_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener')] fn () => ($container->privates['response_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8', false)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'setDefaultLocale'], 100);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'onKernelRequest'], 16);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'validate_request_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener')] fn () => ($container->privates['validate_request_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener()), 'onKernelRequest'], 256);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListener2Service($container)), 'onControllerArguments'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListener2Service($container)), 'logKernelException'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListener2Service($container)), 'onKernelException'], -128);
        $instance->addListener('kernel.response', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListener2Service($container)), 'removeCspHeader'], -128);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] fn () => ($container->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener()), 'onKernelControllerArguments'], 10);
        $instance->addListener('kernel.response', [#[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] fn () => ($container->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener()), 'onKernelResponse'], -10);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] fn () => ($container->privates['locale_aware_listener'] ?? self::getLocaleAwareListenerService($container)), 'onKernelRequest'], 15);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] fn () => ($container->privates['locale_aware_listener'] ?? self::getLocaleAwareListenerService($container)), 'onKernelFinishRequest'], -15);
        $instance->addListener('console.error', [#[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] fn () => ($container->privates['console.error_listener'] ?? $container->load('getConsole_ErrorListenerService')), 'onConsoleError'], -128);
        $instance->addListener('console.terminate', [#[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] fn () => ($container->privates['console.error_listener'] ?? $container->load('getConsole_ErrorListenerService')), 'onConsoleTerminate'], -128);
        $instance->addListener('console.error', [#[\Closure(name: 'console.suggest_missing_package_subscriber', class: 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SuggestMissingPackageSubscriber')] fn () => ($container->privates['console.suggest_missing_package_subscriber'] ??= new \Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber()), 'onConsoleError'], 0);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'mailer.envelope_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\EnvelopeListener')] fn () => ($container->privates['mailer.envelope_listener'] ??= new \Symfony\Component\Mailer\EventListener\EnvelopeListener(NULL, NULL)), 'onMessage'], -255);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'mailer.message_logger_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessageLoggerListener')] fn () => ($container->privates['mailer.message_logger_listener'] ??= new \Symfony\Component\Mailer\EventListener\MessageLoggerListener()), 'onMessage'], -255);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'mailer.messenger_transport_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessengerTransportListener')] fn () => ($container->privates['mailer.messenger_transport_listener'] ??= new \Symfony\Component\Mailer\EventListener\MessengerTransportListener()), 'onMessage'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'esi_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SurrogateListener')] fn () => ($container->privates['esi_listener'] ?? self::getEsiListenerService($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'fragment.listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener')] fn () => ($container->privates['fragment.listener'] ?? self::getFragment_ListenerService($container)), 'onKernelRequest'], 48);
        $instance->addListener('kernel.request', [#[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] fn () => ($container->privates['debug.debug_handlers_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'))), 'configure'], 2048);
        $instance->addListener('console.command', [#[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] fn () => ($container->privates['debug.debug_handlers_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'))), 'configure'], 2048);
        $instance->addListener('kernel.request', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelRequest'], 32);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelException'], -64);
        $instance->addListener('kernel.request', [#[\Closure(name: 'session_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SessionListener')] fn () => ($container->privates['session_listener'] ?? self::getSessionListenerService($container)), 'onKernelRequest'], 128);
        $instance->addListener('kernel.response', [#[\Closure(name: 'session_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SessionListener')] fn () => ($container->privates['session_listener'] ?? self::getSessionListenerService($container)), 'onKernelResponse'], -1000);
        $instance->addListener('kernel.request', [#[\Closure(name: 'security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\EventListener\\FirewallListener')] fn () => ($container->privates['security.firewall'] ?? self::getSecurity_FirewallService($container)), 'configureLogoutUrlGenerator'], 8);
        $instance->addListener('kernel.request', [#[\Closure(name: 'security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\EventListener\\FirewallListener')] fn () => ($container->privates['security.firewall'] ?? self::getSecurity_FirewallService($container)), 'onKernelRequest'], 8);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\EventListener\\FirewallListener')] fn () => ($container->privates['security.firewall'] ?? self::getSecurity_FirewallService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'controller.is_granted_attribute_listener', class: 'Symfony\\Component\\Security\\Http\\EventListener\\IsGrantedAttributeListener')] fn () => ($container->privates['controller.is_granted_attribute_listener'] ?? self::getController_IsGrantedAttributeListenerService($container)), 'onKernelControllerArguments'], 20);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.check_authenticator_credentials', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckCredentialsListener')] fn () => ($container->privates['security.listener.check_authenticator_credentials'] ?? $container->load('getSecurity_Listener_CheckAuthenticatorCredentialsService')), 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.password_migrating', class: 'Symfony\\Component\\Security\\Http\\EventListener\\PasswordMigratingListener')] fn () => ($container->privates['security.listener.password_migrating'] ?? $container->load('getSecurity_Listener_PasswordMigratingService')), 'onLoginSuccess'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'security.rememberme.response_listener', class: 'Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener')] fn () => ($container->privates['security.rememberme.response_listener'] ??= new \Symfony\Component\Security\Http\RememberMe\ResponseListener()), 'onKernelResponse'], 0);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'sensio_framework_extra.controller.listener', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener')] fn () => ($container->privates['sensio_framework_extra.controller.listener'] ?? self::getSensioFrameworkExtra_Controller_ListenerService($container)), 'onKernelController'], 0);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'sensio_framework_extra.converter.listener', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener')] fn () => ($container->privates['sensio_framework_extra.converter.listener'] ?? self::getSensioFrameworkExtra_Converter_ListenerService($container)), 'onKernelController'], 0);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'sensio_framework_extra.view.listener', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener')] fn () => ($container->privates['sensio_framework_extra.view.listener'] ?? self::getSensioFrameworkExtra_View_ListenerService($container)), 'onKernelController'], -128);
        $instance->addListener('kernel.view', [#[\Closure(name: 'sensio_framework_extra.view.listener', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener')] fn () => ($container->privates['sensio_framework_extra.view.listener'] ?? self::getSensioFrameworkExtra_View_ListenerService($container)), 'onKernelView'], 0);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'sensio_framework_extra.cache.listener', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener')] fn () => ($container->privates['sensio_framework_extra.cache.listener'] ??= new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener()), 'onKernelController'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'sensio_framework_extra.cache.listener', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener')] fn () => ($container->privates['sensio_framework_extra.cache.listener'] ??= new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener()), 'onKernelResponse'], 0);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'sensio_framework_extra.security.listener', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\SecurityListener')] fn () => ($container->privates['sensio_framework_extra.security.listener'] ?? self::getSensioFrameworkExtra_Security_ListenerService($container)), 'onKernelControllerArguments'], 0);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'framework_extra_bundle.event.is_granted', class: 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\IsGrantedListener')] fn () => ($container->privates['framework_extra_bundle.event.is_granted'] ?? self::getFrameworkExtraBundle_Event_IsGrantedService($container)), 'onKernelControllerArguments'], 0);
        $instance->addListener('console.command', [#[\Closure(name: 'monolog.handler.console', class: 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler')] fn () => ($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)), 'onCommand'], 255);
        $instance->addListener('console.terminate', [#[\Closure(name: 'monolog.handler.console', class: 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler')] fn () => ($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)), 'onTerminate'], -255);
        $instance->addListener('kernel.view', [#[\Closure(name: 'controller.template_attribute_listener', class: 'Symfony\\Bridge\\Twig\\EventListener\\TemplateAttributeListener')] fn () => ($container->privates['controller.template_attribute_listener'] ?? $container->load('getController_TemplateAttributeListenerService')), 'onKernelView'], -128);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'twig.mailer.message_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessageListener')] fn () => ($container->privates['twig.mailer.message_listener'] ?? $container->load('getTwig_Mailer_MessageListenerService')), 'onMessage'], 0);
        $instance->addListener('knp_pager.before', [#[\Closure(name: 'knp_paginator.subscriber.paginate', class: 'Knp\\Component\\Pager\\Event\\Subscriber\\Paginate\\PaginationSubscriber')] fn () => ($container->privates['knp_paginator.subscriber.paginate'] ??= new \Knp\Component\Pager\Event\Subscriber\Paginate\PaginationSubscriber()), 'before'], 0);
        $instance->addListener('knp_pager.pagination', [#[\Closure(name: 'knp_paginator.subscriber.paginate', class: 'Knp\\Component\\Pager\\Event\\Subscriber\\Paginate\\PaginationSubscriber')] fn () => ($container->privates['knp_paginator.subscriber.paginate'] ??= new \Knp\Component\Pager\Event\Subscriber\Paginate\PaginationSubscriber()), 'pagination'], 0);
        $instance->addListener('knp_pager.before', [#[\Closure(name: 'knp_paginator.subscriber.sortable', class: 'Knp\\Component\\Pager\\Event\\Subscriber\\Sortable\\SortableSubscriber')] fn () => ($container->privates['knp_paginator.subscriber.sortable'] ??= new \Knp\Component\Pager\Event\Subscriber\Sortable\SortableSubscriber()), 'before'], 1);
        $instance->addListener('knp_pager.before', [#[\Closure(name: 'knp_paginator.subscriber.filtration', class: 'Knp\\Component\\Pager\\Event\\Subscriber\\Filtration\\FiltrationSubscriber')] fn () => ($container->privates['knp_paginator.subscriber.filtration'] ??= new \Knp\Component\Pager\Event\Subscriber\Filtration\FiltrationSubscriber()), 'before'], 1);
        $instance->addListener('knp_pager.pagination', [#[\Closure(name: 'knp_paginator.subscriber.sliding_pagination', class: 'Knp\\Bundle\\PaginatorBundle\\Subscriber\\SlidingPaginationSubscriber')] fn () => ($container->privates['knp_paginator.subscriber.sliding_pagination'] ?? self::getKnpPaginator_Subscriber_SlidingPaginationService($container)), 'pagination'], 1);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.csrf_protection', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfProtectionListener')] fn () => ($container->privates['security.listener.csrf_protection'] ?? $container->load('getSecurity_Listener_CsrfProtectionService')), 'checkPassport'], 512);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.csrf_token_clearing', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfTokenClearingLogoutListener')] fn () => ($container->privates['security.logout.listener.csrf_token_clearing'] ?? $container->load('getSecurity_Logout_Listener_CsrfTokenClearingService')), 'onLogout'], 0);

        return $instance;
    }

    /*
     * Gets the public 'http_kernel' shared service.
     *
     * @return \Symfony\Component\HttpKernel\HttpKernel
     */
    protected static function getHttpKernelService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['http_kernel'])) {
            return $container->services['http_kernel'];
        }
        $b = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($container, ($container->privates['monolog.logger.request'] ?? self::getMonolog_Logger_RequestService($container)));
        $b->allowControllers(['Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController', 'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController']);
        $b->allowControllers(['Eccube\\Kernel', 'Eccube\\Controller\\AbstractController', 'Eccube\\Controller\\AbstractShoppingController', 'Eccube\\Controller\\Admin\\AbstractCsvImportController', 'Eccube\\Controller\\Admin\\AdminController', 'Eccube\\Controller\\Admin\\Content\\BlockController', 'Eccube\\Controller\\Admin\\Content\\CacheController', 'Eccube\\Controller\\Admin\\Content\\CssController', 'Eccube\\Controller\\Admin\\Content\\FileController', 'Eccube\\Controller\\Admin\\Content\\JsController', 'Eccube\\Controller\\Admin\\Content\\LayoutController', 'Eccube\\Controller\\Admin\\Content\\MaintenanceController', 'Eccube\\Controller\\Admin\\Content\\NewsController', 'Eccube\\Controller\\Admin\\Content\\PageController', 'Eccube\\Controller\\Admin\\Customer\\CustomerController', 'Eccube\\Controller\\Admin\\Customer\\CustomerDeliveryEditController', 'Eccube\\Controller\\Admin\\Customer\\CustomerEditController', 'Eccube\\Controller\\Admin\\Order\\CsvImportController', 'Eccube\\Controller\\Admin\\Order\\EditController', 'Eccube\\Controller\\Admin\\Order\\MailController', 'Eccube\\Controller\\Admin\\Order\\OrderController', 'Eccube\\Controller\\Admin\\Order\\ShippingController', 'Eccube\\Controller\\Admin\\Product\\CategoryController', 'Eccube\\Controller\\Admin\\Product\\ClassCategoryController', 'Eccube\\Controller\\Admin\\Product\\ClassNameController', 'Eccube\\Controller\\Admin\\Product\\CsvImportController', 'Eccube\\Controller\\Admin\\Product\\ProductClassController', 'Eccube\\Controller\\Admin\\Product\\ProductController', 'Eccube\\Controller\\Admin\\Product\\TagController', 'Eccube\\Controller\\Admin\\Setting\\Shop\\CalendarController', 'Eccube\\Controller\\Admin\\Setting\\Shop\\CsvController', 'Eccube\\Controller\\Admin\\Setting\\Shop\\DeliveryController', 'Eccube\\Controller\\Admin\\Setting\\Shop\\MailController', 'Eccube\\Controller\\Admin\\Setting\\Shop\\OrderStatusController', 'Eccube\\Controller\\Admin\\Setting\\Shop\\PaymentController', 'Eccube\\Controller\\Admin\\Setting\\Shop\\ShopController', 'Eccube\\Controller\\Admin\\Setting\\Shop\\TaxRuleController', 'Eccube\\Controller\\Admin\\Setting\\Shop\\TradeLawController', 'Eccube\\Controller\\Admin\\Setting\\System\\AuthorityController', 'Eccube\\Controller\\Admin\\Setting\\System\\LogController', 'Eccube\\Controller\\Admin\\Setting\\System\\LoginHistoryController', 'Eccube\\Controller\\Admin\\Setting\\System\\MasterdataController', 'Eccube\\Controller\\Admin\\Setting\\System\\MemberController', 'Eccube\\Controller\\Admin\\Setting\\System\\SecurityController', 'Eccube\\Controller\\Admin\\Setting\\System\\SystemController', 'Eccube\\Controller\\Admin\\Setting\\System\\TwoFactorAuthController', 'Eccube\\Controller\\Admin\\Store\\OwnerStoreController', 'Eccube\\Controller\\Admin\\Store\\PluginController', 'Eccube\\Controller\\Admin\\Store\\TemplateController', 'Eccube\\Controller\\Block\\AutoNewItemController', 'Eccube\\Controller\\Block\\CalendarController', 'Eccube\\Controller\\Block\\CartController', 'Eccube\\Controller\\Block\\SearchProductController', 'Eccube\\Controller\\CartController', 'Eccube\\Controller\\ContactController', 'Eccube\\Controller\\EntryController', 'Eccube\\Controller\\ForgotController', 'Eccube\\Controller\\HelpController', 'Eccube\\Controller\\Install\\InstallController', 'Eccube\\Controller\\InstallPluginController', 'Eccube\\Controller\\Mypage\\ChangeController', 'Eccube\\Controller\\Mypage\\DeliveryController', 'Eccube\\Controller\\Mypage\\MypageController', 'Eccube\\Controller\\Mypage\\WithdrawController', 'Eccube\\Controller\\NonMemberShoppingController', 'Eccube\\Controller\\ProductController', 'Eccube\\Controller\\ShippingMultipleController', 'Eccube\\Controller\\ShoppingController', 'Eccube\\Controller\\SitemapController', 'Eccube\\Controller\\TopController', 'Eccube\\Controller\\TradeLawController', 'Eccube\\Controller\\UserDataController', 'Doctrine\\Bundle\\DoctrineBundle\\Controller\\ProfilerController']);

        return $container->services['http_kernel'] = new \Symfony\Component\HttpKernel\HttpKernel($a, $b, ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), new \Symfony\Component\HttpKernel\Controller\ArgumentResolver(($container->privates['argument_metadata_factory'] ??= new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['security.user_value_resolver'] ?? $container->load('getSecurity_UserValueResolverService'));
            yield 1 => ($container->privates['security.security_token_value_resolver'] ?? $container->load('getSecurity_SecurityTokenValueResolverService'));
            yield 2 => ($container->privates['doctrine.orm.entity_value_resolver'] ?? $container->load('getDoctrine_Orm_EntityValueResolverService'));
            yield 3 => ($container->privates['argument_resolver.backed_enum_resolver'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver());
            yield 4 => ($container->privates['argument_resolver.datetime'] ?? $container->load('getArgumentResolver_DatetimeService'));
            yield 5 => ($container->privates['argument_resolver.request_attribute'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver());
            yield 6 => ($container->privates['argument_resolver.request'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver());
            yield 7 => ($container->privates['argument_resolver.session'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver());
            yield 8 => ($container->privates['argument_resolver.service'] ?? $container->load('getArgumentResolver_ServiceService'));
            yield 9 => ($container->privates['argument_resolver.default'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver());
            yield 10 => ($container->privates['argument_resolver.variadic'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver());
        }, 11), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Symfony\\Bridge\\Doctrine\\ArgumentResolver\\EntityValueResolver' => ['privates', 'doctrine.orm.entity_value_resolver', 'getDoctrine_Orm_EntityValueResolverService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver' => ['privates', 'argument_resolver.backed_enum_resolver', 'getArgumentResolver_BackedEnumResolverService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver' => ['privates', 'argument_resolver.datetime', 'getArgumentResolver_DatetimeService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver' => ['privates', 'argument_resolver.default', 'getArgumentResolver_DefaultService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver' => ['privates', 'argument_resolver.query_parameter_value_resolver', 'getArgumentResolver_QueryParameterValueResolverService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver' => ['privates', 'argument_resolver.request_attribute', 'getArgumentResolver_RequestAttributeService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver' => ['privates', 'argument_resolver.request_payload', 'getArgumentResolver_RequestPayloadService', false],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver' => ['privates', 'argument_resolver.request', 'getArgumentResolver_RequestService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver' => ['privates', 'argument_resolver.service', 'getArgumentResolver_ServiceService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver' => ['privates', 'argument_resolver.session', 'getArgumentResolver_SessionService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver' => ['privates', 'argument_resolver.variadic', 'getArgumentResolver_VariadicService', true],
            'Symfony\\Component\\Security\\Http\\Controller\\SecurityTokenValueResolver' => ['privates', 'security.security_token_value_resolver', 'getSecurity_SecurityTokenValueResolverService', true],
            'Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver' => ['privates', 'security.user_value_resolver', 'getSecurity_UserValueResolverService', true],
        ], [
            'Symfony\\Bridge\\Doctrine\\ArgumentResolver\\EntityValueResolver' => 'Symfony\\Bridge\\Doctrine\\ArgumentResolver\\EntityValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver',
            'Symfony\\Component\\Security\\Http\\Controller\\SecurityTokenValueResolver' => 'Symfony\\Component\\Security\\Http\\Controller\\SecurityTokenValueResolver',
            'Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver' => 'Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver',
        ])), false);
    }

    /*
     * Gets the public 'request_stack' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack
     */
    protected static function getRequestStackService($container)
    {
        return $container->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /*
     * Gets the public 'router' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router
     */
    protected static function getRouterService($container)
    {
        $a = new \Monolog\Logger('router');
        $a->pushProcessor(($container->privates['Eccube\\Log\\Processor\\SessionProcessor'] ?? self::getSessionProcessorService($container)));
        $a->pushProcessor(($container->privates['Eccube\\Log\\Processor\\TokenProcessor'] ?? self::getTokenProcessorService($container)));
        $a->pushProcessor(($container->privates['Monolog\\Processor\\UidProcessor'] ??= new \Monolog\Processor\UidProcessor()));
        $a->pushProcessor(($container->privates['Monolog\\Processor\\IntrospectionProcessor'] ??= new \Monolog\Processor\IntrospectionProcessor(100, ['Eccube\\\\Log', 'Psr\\\\Log'])));
        $a->pushProcessor(($container->privates['Symfony\\Bridge\\Monolog\\Processor\\WebProcessor'] ?? self::getWebProcessorService($container)));
        $a->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $a->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));

        $container->services['router'] = $instance = new \Symfony\Bundle\FrameworkBundle\Routing\Router((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'routing.loader' => ['services', 'routing.loader', 'getRouting_LoaderService', true],
        ], [
            'routing.loader' => 'Symfony\\Component\\Config\\Loader\\LoaderInterface',
        ]))->withContext('router.default', $container), 'kernel::loadRoutes', ['cache_dir' => $container->targetDir.'', 'debug' => false, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\CompiledUrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\CompiledUrlGeneratorDumper', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableCompiledUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\CompiledUrlMatcherDumper', 'strict_requirements' => NULL, 'resource_type' => 'service'], ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)), ($container->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container)), $a, $container->getEnv('ECCUBE_LOCALE'));

        $instance->setConfigCacheFactory(($container->privates['config_cache_factory'] ??= new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory()));
        $instance->addExpressionLanguageProvider(($container->privates['router.expression_language_provider'] ?? self::getRouter_ExpressionLanguageProviderService($container)));

        return $instance;
    }

    /*
     * Gets the public 'translator' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator
     */
    protected static function getTranslatorService($container)
    {
        $container->services['translator'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'translation.loader.csv' => ['privates', 'translation.loader.csv', 'getTranslation_Loader_CsvService', true],
            'translation.loader.dat' => ['privates', 'translation.loader.dat', 'getTranslation_Loader_DatService', true],
            'translation.loader.ini' => ['privates', 'translation.loader.ini', 'getTranslation_Loader_IniService', true],
            'translation.loader.json' => ['privates', 'translation.loader.json', 'getTranslation_Loader_JsonService', true],
            'translation.loader.mo' => ['privates', 'translation.loader.mo', 'getTranslation_Loader_MoService', true],
            'translation.loader.php' => ['privates', 'translation.loader.php', 'getTranslation_Loader_PhpService', true],
            'translation.loader.po' => ['privates', 'translation.loader.po', 'getTranslation_Loader_PoService', true],
            'translation.loader.qt' => ['privates', 'translation.loader.qt', 'getTranslation_Loader_QtService', true],
            'translation.loader.res' => ['privates', 'translation.loader.res', 'getTranslation_Loader_ResService', true],
            'translation.loader.xliff' => ['privates', 'translation.loader.xliff', 'getTranslation_Loader_XliffService', true],
            'translation.loader.yml' => ['privates', 'translation.loader.yml', 'getTranslation_Loader_YmlService', true],
        ], [
            'translation.loader.csv' => '?',
            'translation.loader.dat' => '?',
            'translation.loader.ini' => '?',
            'translation.loader.json' => '?',
            'translation.loader.mo' => '?',
            'translation.loader.php' => '?',
            'translation.loader.po' => '?',
            'translation.loader.qt' => '?',
            'translation.loader.res' => '?',
            'translation.loader.xliff' => '?',
            'translation.loader.yml' => '?',
        ]), new \Symfony\Component\Translation\Formatter\MessageFormatter(new \Symfony\Component\Translation\IdentityTranslator()), $container->getEnv('ECCUBE_LOCALE'), ['translation.loader.php' => ['php'], 'translation.loader.yml' => ['yaml', 'yml'], 'translation.loader.xliff' => ['xlf', 'xliff'], 'translation.loader.po' => ['po'], 'translation.loader.mo' => ['mo'], 'translation.loader.qt' => ['ts'], 'translation.loader.csv' => ['csv'], 'translation.loader.res' => ['res'], 'translation.loader.dat' => ['dat'], 'translation.loader.ini' => ['ini'], 'translation.loader.json' => ['json']], ['cache_dir' => ($container->targetDir.''.'/translations'), 'debug' => false, 'resource_files' => ['af' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.af.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.af.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.af.xlf')], 'ar' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ar.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.ar.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ar.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.ar.xliff')], 'az' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.az.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.az.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.az.xlf')], 'be' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.be.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.be.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.be.xlf')], 'bg' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.bg.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.bg.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.bg.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.bg.xliff')], 'bs' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.bs.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.bs.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.bs.xlf')], 'ca' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ca.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.ca.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ca.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.ca.xliff')], 'cs' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.cs.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.cs.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.cs.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.cs.xliff')], 'cy' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.cy.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.cy.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.cy.xlf')], 'da' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.da.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.da.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.da.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.da.xliff')], 'de' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.de.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.de.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.de.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.de.xliff')], 'el' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.el.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.el.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.el.xlf')], 'en' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.en.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.en.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.en.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.en.xliff'), (\dirname(__DIR__, 4).'/src/Eccube/Resource/locale/messages.en.yaml'), (\dirname(__DIR__, 4).'/src/Eccube/Resource/locale/validators.en.yaml')], 'es' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.es.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.es.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.es.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.es.xliff')], 'et' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.et.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.et.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.et.xlf')], 'eu' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.eu.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.eu.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.eu.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.eu.xliff')], 'fa' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.fa.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.fa.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.fa.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.fa.xliff')], 'fi' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.fi.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.fi.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.fi.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.fi.xliff')], 'fr' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.fr.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.fr.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.fr.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.fr.xliff')], 'gl' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.gl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.gl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.gl.xlf')], 'he' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.he.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.he.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.he.xlf')], 'hr' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.hr.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.hr.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.hr.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.hr.xliff')], 'hu' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.hu.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.hu.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.hu.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.hu.xliff')], 'hy' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.hy.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.hy.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.hy.xlf')], 'id' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.id.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.id.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.id.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.id.xliff')], 'it' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.it.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.it.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.it.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.it.xliff')], 'ja' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ja.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.ja.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ja.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.ja.xliff'), (\dirname(__DIR__, 4).'/src/Eccube/Resource/locale/messages.ja.yaml'), (\dirname(__DIR__, 4).'/src/Eccube/Resource/locale/validators.ja.yaml')], 'lb' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.lb.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.lb.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.lb.xlf')], 'lt' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.lt.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.lt.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.lt.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.lt.xliff')], 'lv' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.lv.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.lv.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.lv.xlf')], 'mk' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.mk.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.mk.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.mk.xlf')], 'mn' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.mn.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.mn.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.mn.xlf')], 'my' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.my.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.my.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.my.xlf')], 'nb' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.nb.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.nb.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.nb.xlf')], 'nl' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.nl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.nl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.nl.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.nl.xliff')], 'nn' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.nn.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.nn.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.nn.xlf')], 'no' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.no.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.no.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.no.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.no.xliff')], 'pl' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.pl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.pl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.pl.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.pl.xliff')], 'pt' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.pt.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.pt.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.pt.xlf')], 'pt_BR' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.pt_BR.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.pt_BR.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.pt_BR.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.pt_BR.xliff')], 'ro' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ro.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.ro.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ro.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.ro.xliff')], 'ru' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ru.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.ru.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ru.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.ru.xliff')], 'sk' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sk.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.sk.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sk.xlf')], 'sl' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.sl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sl.xlf')], 'sq' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sq.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.sq.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sq.xlf')], 'sr_Cyrl' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sr_Cyrl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.sr_Cyrl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sr_Cyrl.xlf')], 'sr_Latn' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sr_Latn.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.sr_Latn.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sr_Latn.xlf')], 'sv' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sv.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.sv.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sv.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.sv.xliff')], 'th' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.th.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.th.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.th.xlf')], 'tl' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.tl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.tl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.tl.xlf')], 'tr' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.tr.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.tr.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.tr.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.tr.xliff')], 'uk' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.uk.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.uk.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.uk.xlf'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.uk.xliff')], 'ur' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ur.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.ur.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ur.xlf')], 'uz' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.uz.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.uz.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.uz.xlf')], 'vi' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.vi.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.vi.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.vi.xlf')], 'zh_CN' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.zh_CN.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.zh_CN.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.zh_CN.xlf')], 'zh_TW' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.zh_TW.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations/validators.zh_TW.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.zh_TW.xlf')], 'ky' => [(\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.ky.xliff')], 'sw' => [(\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations/KnpPaginatorBundle.sw.xliff')]], 'scanned_directories' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations'), (\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/translations'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations'), (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/translations'), (\dirname(__DIR__, 4).'/src/Eccube/Resource/locale/'), (\dirname(__DIR__, 4).'/app/Customize/Resource/locale/'), (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/symfony/security-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-fixtures-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/translations'), (\dirname(__DIR__, 4).'/vendor/symfony/monolog-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/symfony/twig-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/exercise/htmlpurifier-bundle/src/translations'), (\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-migrations-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/twig/extra-bundle/translations'), (\dirname(__DIR__, 4).'/src/Eccube/translations'), (\dirname(__DIR__, 4).'/translations')], 'cache_vary' => ['scanned_directories' => ['vendor/symfony/validator/Resources/translations', 'vendor/symfony/form/Resources/translations', 'vendor/symfony/security-core/Resources/translations', 'vendor/knplabs/knp-paginator-bundle/translations', 'src/Eccube/Resource/locale/', 'app/Customize/Resource/locale/', 'vendor/symfony/framework-bundle/translations', 'vendor/symfony/security-bundle/translations', 'vendor/doctrine/doctrine-bundle/translations', 'vendor/doctrine/doctrine-fixtures-bundle/translations', 'vendor/sensio/framework-extra-bundle/src/translations', 'vendor/symfony/monolog-bundle/translations', 'vendor/symfony/twig-bundle/translations', 'vendor/exercise/htmlpurifier-bundle/src/translations', 'vendor/doctrine/doctrine-migrations-bundle/translations', 'vendor/twig/extra-bundle/translations', 'src/Eccube/translations', 'translations']]], []);

        $instance->setConfigCacheFactory(($container->privates['config_cache_factory'] ??= new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory()));
        $instance->setFallbackLocales([$container->getEnv('ECCUBE_LOCALE'), $container->getEnv('ECCUBE_LOCALE')]);

        return $instance;
    }

    /*
     * Gets the private '.service_locator.HDnBBSZ' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_HDnBBSZService($container)
    {
        return $container->privates['.service_locator.HDnBBSZ'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'security.firewall.map.context.admin' => ['privates', 'security.firewall.map.context.admin', 'getSecurity_Firewall_Map_Context_AdminService', true],
            'security.firewall.map.context.customer' => ['privates', 'security.firewall.map.context.customer', 'getSecurity_Firewall_Map_Context_CustomerService', true],
            'security.firewall.map.context.dev' => ['privates', 'security.firewall.map.context.dev', 'getSecurity_Firewall_Map_Context_DevService', true],
        ], [
            'security.firewall.map.context.admin' => '?',
            'security.firewall.map.context.customer' => '?',
            'security.firewall.map.context.dev' => '?',
        ]);
    }

    /*
     * Gets the private 'Eccube\EventListener\IpAddrListener' shared autowired service.
     *
     * @return \Eccube\EventListener\IpAddrListener
     */
    protected static function getIpAddrListenerService($container)
    {
        return $container->privates['Eccube\\EventListener\\IpAddrListener'] = new \Eccube\EventListener\IpAddrListener(($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container)), ($container->privates['Eccube\\Request\\Context'] ?? self::getContextService($container)));
    }

    /*
     * Gets the private 'Eccube\EventListener\LogListener' shared autowired service.
     *
     * @return \Eccube\EventListener\LogListener
     */
    protected static function getLogListenerService($container)
    {
        return $container->privates['Eccube\\EventListener\\LogListener'] = new \Eccube\EventListener\LogListener(($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)));
    }

    /*
     * Gets the private 'Eccube\EventListener\MaintenanceListener' shared autowired service.
     *
     * @return \Eccube\EventListener\MaintenanceListener
     */
    protected static function getMaintenanceListenerService($container)
    {
        return $container->privates['Eccube\\EventListener\\MaintenanceListener'] = new \Eccube\EventListener\MaintenanceListener(($container->privates['Eccube\\Request\\Context'] ?? self::getContextService($container)), ($container->services['Eccube\\Service\\SystemService'] ?? self::getSystemServiceService($container)));
    }

    /*
     * Gets the private 'Eccube\EventListener\MobileTemplatePathListener' shared autowired service.
     *
     * @return \Eccube\EventListener\MobileTemplatePathListener
     */
    protected static function getMobileTemplatePathListenerService($container)
    {
        $a = ($container->privates['twig'] ?? self::getTwigService($container));

        if (isset($container->privates['Eccube\\EventListener\\MobileTemplatePathListener'])) {
            return $container->privates['Eccube\\EventListener\\MobileTemplatePathListener'];
        }

        return $container->privates['Eccube\\EventListener\\MobileTemplatePathListener'] = new \Eccube\EventListener\MobileTemplatePathListener(($container->privates['Eccube\\Request\\Context'] ?? self::getContextService($container)), $a, ($container->services['Detection\\MobileDetect'] ??= new \Detection\MobileDetect()), ($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container)));
    }

    /*
     * Gets the private 'Eccube\EventListener\RateLimiterListener' shared autowired service.
     *
     * @return \Eccube\EventListener\RateLimiterListener
     */
    protected static function getRateLimiterListenerService($container)
    {
        return $container->privates['Eccube\\EventListener\\RateLimiterListener'] = new \Eccube\EventListener\RateLimiterListener(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'limiter._login_global_admin' => ['privates', 'limiter._login_global_admin', 'getLimiter_LoginGlobalAdminService', true],
            'limiter._login_global_customer' => ['privates', 'limiter._login_global_customer', 'getLimiter_LoginGlobalCustomerService', true],
            'limiter._login_local_admin' => ['privates', 'limiter._login_local_admin', 'getLimiter_LoginLocalAdminService', true],
            'limiter._login_local_customer' => ['privates', 'limiter._login_local_customer', 'getLimiter_LoginLocalCustomerService', true],
            'limiter.admin_two_factor_auth' => ['privates', 'limiter.admin_two_factor_auth', 'getLimiter_AdminTwoFactorAuthService', true],
            'limiter.contact' => ['privates', 'limiter.contact', 'getLimiter_ContactService', true],
            'limiter.entry' => ['privates', 'limiter.entry', 'getLimiter_EntryService', true],
            'limiter.entry_complete' => ['privates', 'limiter.entry_complete', 'getLimiter_EntryCompleteService', true],
            'limiter.forgot' => ['privates', 'limiter.forgot', 'getLimiter_ForgotService', true],
            'limiter.mypage_change' => ['privates', 'limiter.mypage_change', 'getLimiter_MypageChangeService', true],
            'limiter.mypage_delivery_delete' => ['privates', 'limiter.mypage_delivery_delete', 'getLimiter_MypageDeliveryDeleteService', true],
            'limiter.mypage_delivery_edit' => ['privates', 'limiter.mypage_delivery_edit', 'getLimiter_MypageDeliveryEditService', true],
            'limiter.mypage_delivery_new' => ['privates', 'limiter.mypage_delivery_new', 'getLimiter_MypageDeliveryNewService', true],
            'limiter.shopping_checkout_customer' => ['privates', 'limiter.shopping_checkout_customer', 'getLimiter_ShoppingCheckoutCustomerService', true],
            'limiter.shopping_checkout_ip' => ['privates', 'limiter.shopping_checkout_ip', 'getLimiter_ShoppingCheckoutIpService', true],
            'limiter.shopping_confirm_customer' => ['privates', 'limiter.shopping_confirm_customer', 'getLimiter_ShoppingConfirmCustomerService', true],
            'limiter.shopping_confirm_ip' => ['privates', 'limiter.shopping_confirm_ip', 'getLimiter_ShoppingConfirmIpService', true],
            'limiter.shopping_shipping_edit_customer' => ['privates', 'limiter.shopping_shipping_edit_customer', 'getLimiter_ShoppingShippingEditCustomerService', true],
            'limiter.shopping_shipping_multiple_edit_customer' => ['privates', 'limiter.shopping_shipping_multiple_edit_customer', 'getLimiter_ShoppingShippingMultipleEditCustomerService', true],
        ], [
            'limiter._login_global_admin' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter._login_global_customer' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter._login_local_admin' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter._login_local_customer' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter.admin_two_factor_auth' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter.contact' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter.entry' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter.entry_complete' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter.forgot' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter.mypage_change' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter.mypage_delivery_delete' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter.mypage_delivery_edit' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter.mypage_delivery_new' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter.shopping_checkout_customer' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter.shopping_checkout_ip' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter.shopping_confirm_customer' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter.shopping_confirm_ip' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter.shopping_shipping_edit_customer' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
            'limiter.shopping_shipping_multiple_edit_customer' => 'Symfony\\Component\\RateLimiter\\RateLimiterFactory',
        ]), ($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container)), ($container->privates['Eccube\\Request\\Context'] ?? self::getContextService($container)));
    }

    /*
     * Gets the private 'Eccube\EventListener\RestrictFileUploadListener' shared autowired service.
     *
     * @return \Eccube\EventListener\RestrictFileUploadListener
     */
    protected static function getRestrictFileUploadListenerService($container)
    {
        return $container->privates['Eccube\\EventListener\\RestrictFileUploadListener'] = new \Eccube\EventListener\RestrictFileUploadListener(($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container)), ($container->privates['Eccube\\Request\\Context'] ?? self::getContextService($container)));
    }

    /*
     * Gets the private 'Eccube\EventListener\TransactionListener' shared autowired service.
     *
     * @return \Eccube\EventListener\TransactionListener
     */
    protected static function getTransactionListenerService($container)
    {
        return $container->privates['Eccube\\EventListener\\TransactionListener'] = new \Eccube\EventListener\TransactionListener(($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container)));
    }

    /*
     * Gets the private 'Eccube\EventListener\TwigInitializeListener' shared autowired service.
     *
     * @return \Eccube\EventListener\TwigInitializeListener
     */
    protected static function getTwigInitializeListenerService($container)
    {
        $a = ($container->privates['twig'] ?? self::getTwigService($container));

        if (isset($container->privates['Eccube\\EventListener\\TwigInitializeListener'])) {
            return $container->privates['Eccube\\EventListener\\TwigInitializeListener'];
        }

        return $container->privates['Eccube\\EventListener\\TwigInitializeListener'] = new \Eccube\EventListener\TwigInitializeListener($a, ($container->privates['Eccube\\Repository\\BaseInfoRepository'] ?? self::getBaseInfoRepositoryService($container)), ($container->privates['Eccube\\Repository\\PageRepository'] ?? self::getPageRepositoryService($container)), ($container->privates['Eccube\\Repository\\PageLayoutRepository'] ?? self::getPageLayoutRepositoryService($container)), ($container->privates['Eccube\\Repository\\BlockPositionRepository'] ?? self::getBlockPositionRepositoryService($container)), ($container->privates['Eccube\\Repository\\Master\\DeviceTypeRepository'] ?? self::getDeviceTypeRepositoryService($container)), ($container->privates['Eccube\\Repository\\AuthorityRoleRepository'] ?? self::getAuthorityRoleRepositoryService($container)), ($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container)), ($container->privates['Eccube\\Request\\Context'] ?? self::getContextService($container)), ($container->services['Detection\\MobileDetect'] ??= new \Detection\MobileDetect()), ($container->services['router'] ?? self::getRouterService($container)), ($container->privates['Eccube\\Repository\\LayoutRepository'] ?? self::getLayoutRepositoryService($container)), ($container->services['Eccube\\Service\\SystemService'] ?? self::getSystemServiceService($container)));
    }

    /*
     * Gets the private 'Eccube\EventListener\TwoFactorAuthListener' shared autowired service.
     *
     * @return \Eccube\EventListener\TwoFactorAuthListener
     */
    protected static function getTwoFactorAuthListenerService($container)
    {
        return $container->privates['Eccube\\EventListener\\TwoFactorAuthListener'] = new \Eccube\EventListener\TwoFactorAuthListener(($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container)), ($container->privates['Eccube\\Request\\Context'] ?? self::getContextService($container)), ($container->services['router'] ?? self::getRouterService($container)), ($container->privates['Eccube\\Service\\TwoFactorAuthService'] ?? self::getTwoFactorAuthServiceService($container)));
    }

    /*
     * Gets the private 'Eccube\Log\Processor\SessionProcessor' shared autowired service.
     *
     * @return \Eccube\Log\Processor\SessionProcessor
     */
    protected static function getSessionProcessorService($container)
    {
        return $container->privates['Eccube\\Log\\Processor\\SessionProcessor'] = new \Eccube\Log\Processor\SessionProcessor(($container->privates['Eccube\\Session\\Session'] ?? self::getSessionService($container)));
    }

    /*
     * Gets the private 'Eccube\Log\Processor\TokenProcessor' shared autowired service.
     *
     * @return \Eccube\Log\Processor\TokenProcessor
     */
    protected static function getTokenProcessorService($container)
    {
        return $container->privates['Eccube\\Log\\Processor\\TokenProcessor'] = new \Eccube\Log\Processor\TokenProcessor(($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)));
    }

    /*
     * Gets the private 'Eccube\Repository\AuthorityRoleRepository' shared autowired service.
     *
     * @return \Eccube\Repository\AuthorityRoleRepository
     */
    protected static function getAuthorityRoleRepositoryService($container)
    {
        return $container->privates['Eccube\\Repository\\AuthorityRoleRepository'] = new \Eccube\Repository\AuthorityRoleRepository(($container->services['doctrine'] ?? self::getDoctrineService($container)));
    }

    /*
     * Gets the private 'Eccube\Repository\BaseInfoRepository' shared autowired service.
     *
     * @return \Eccube\Repository\BaseInfoRepository
     */
    protected static function getBaseInfoRepositoryService($container)
    {
        return $container->privates['Eccube\\Repository\\BaseInfoRepository'] = new \Eccube\Repository\BaseInfoRepository(($container->services['doctrine'] ?? self::getDoctrineService($container)));
    }

    /*
     * Gets the private 'Eccube\Repository\BlockPositionRepository' shared autowired service.
     *
     * @return \Eccube\Repository\BlockPositionRepository
     */
    protected static function getBlockPositionRepositoryService($container)
    {
        return $container->privates['Eccube\\Repository\\BlockPositionRepository'] = new \Eccube\Repository\BlockPositionRepository(($container->privates['Eccube\\Repository\\BlockRepository'] ?? self::getBlockRepositoryService($container)), ($container->services['doctrine'] ?? self::getDoctrineService($container)));
    }

    /*
     * Gets the private 'Eccube\Repository\BlockRepository' shared autowired service.
     *
     * @return \Eccube\Repository\BlockRepository
     */
    protected static function getBlockRepositoryService($container)
    {
        return $container->privates['Eccube\\Repository\\BlockRepository'] = new \Eccube\Repository\BlockRepository(($container->services['doctrine'] ?? self::getDoctrineService($container)), ($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container)));
    }

    /*
     * Gets the private 'Eccube\Repository\CartRepository' shared autowired service.
     *
     * @return \Eccube\Repository\CartRepository
     */
    protected static function getCartRepositoryService($container)
    {
        return $container->privates['Eccube\\Repository\\CartRepository'] = new \Eccube\Repository\CartRepository(($container->services['doctrine'] ?? self::getDoctrineService($container)));
    }

    /*
     * Gets the private 'Eccube\Repository\LayoutRepository' shared autowired service.
     *
     * @return \Eccube\Repository\LayoutRepository
     */
    protected static function getLayoutRepositoryService($container)
    {
        return $container->privates['Eccube\\Repository\\LayoutRepository'] = new \Eccube\Repository\LayoutRepository(($container->services['doctrine'] ?? self::getDoctrineService($container)));
    }

    /*
     * Gets the private 'Eccube\Repository\Master\DeviceTypeRepository' shared autowired service.
     *
     * @return \Eccube\Repository\Master\DeviceTypeRepository
     */
    protected static function getDeviceTypeRepositoryService($container)
    {
        return $container->privates['Eccube\\Repository\\Master\\DeviceTypeRepository'] = new \Eccube\Repository\Master\DeviceTypeRepository(($container->services['doctrine'] ?? self::getDoctrineService($container)));
    }

    /*
     * Gets the private 'Eccube\Repository\OrderRepository' shared autowired service.
     *
     * @return \Eccube\Repository\OrderRepository
     */
    protected static function getOrderRepositoryService($container)
    {
        return $container->privates['Eccube\\Repository\\OrderRepository'] = new \Eccube\Repository\OrderRepository(($container->services['doctrine'] ?? self::getDoctrineService($container)), ($container->privates['Eccube\\Doctrine\\Query\\Queries'] ??= new \Eccube\Doctrine\Query\Queries()));
    }

    /*
     * Gets the private 'Eccube\Repository\PageLayoutRepository' shared autowired service.
     *
     * @return \Eccube\Repository\PageLayoutRepository
     */
    protected static function getPageLayoutRepositoryService($container)
    {
        return $container->privates['Eccube\\Repository\\PageLayoutRepository'] = new \Eccube\Repository\PageLayoutRepository(($container->services['doctrine'] ?? self::getDoctrineService($container)));
    }

    /*
     * Gets the private 'Eccube\Repository\PageRepository' shared autowired service.
     *
     * @return \Eccube\Repository\PageRepository
     */
    protected static function getPageRepositoryService($container)
    {
        return $container->privates['Eccube\\Repository\\PageRepository'] = new \Eccube\Repository\PageRepository(($container->services['doctrine'] ?? self::getDoctrineService($container)), ($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container)));
    }

    /*
     * Gets the private 'Eccube\Repository\ProductClassRepository' shared autowired service.
     *
     * @return \Eccube\Repository\ProductClassRepository
     */
    protected static function getProductClassRepositoryService($container)
    {
        return $container->privates['Eccube\\Repository\\ProductClassRepository'] = new \Eccube\Repository\ProductClassRepository(($container->services['doctrine'] ?? self::getDoctrineService($container)));
    }

    /*
     * Gets the private 'Eccube\Repository\ProductRepository' shared autowired service.
     *
     * @return \Eccube\Repository\ProductRepository
     */
    protected static function getProductRepositoryService($container)
    {
        return $container->privates['Eccube\\Repository\\ProductRepository'] = new \Eccube\Repository\ProductRepository(($container->services['doctrine'] ?? self::getDoctrineService($container)), ($container->privates['Eccube\\Doctrine\\Query\\Queries'] ??= new \Eccube\Doctrine\Query\Queries()), ($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container)));
    }

    /*
     * Gets the private 'Eccube\Repository\TaxRuleRepository' shared autowired service.
     *
     * @return \Eccube\Repository\TaxRuleRepository
     */
    protected static function getTaxRuleRepositoryService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['Eccube\\Repository\\TaxRuleRepository'] = $container->createProxy('TaxRuleRepositoryGhost4765c6c', static fn () => \TaxRuleRepositoryGhost4765c6c::createLazyGhost(static fn ($proxy) => self::getTaxRuleRepositoryService($container, $proxy)));
        }

        include_once \dirname(__DIR__, 4).'/src/Eccube/Repository/TaxRuleRepository.php';

        return ($lazyLoad->__construct(($container->services['doctrine'] ?? self::getDoctrineService($container)), ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), ($container->privates['security.authorization_checker'] ?? self::getSecurity_AuthorizationCheckerService($container)), ($container->privates['Eccube\\Repository\\BaseInfoRepository'] ?? self::getBaseInfoRepositoryService($container)), ($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container))) && false ?: $lazyLoad);
    }

    /*
     * Gets the private 'Eccube\Request\Context' shared autowired service.
     *
     * @return \Eccube\Request\Context
     */
    protected static function getContextService($container)
    {
        return $container->privates['Eccube\\Request\\Context'] = new \Eccube\Request\Context(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container)), ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)));
    }

    /*
     * Gets the private 'Eccube\Service\CartService' shared autowired service.
     *
     * @return \Eccube\Service\CartService
     */
    protected static function getCartServiceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['Eccube\\Service\\CartService'] = $container->createProxy('CartServiceGhost9af72f0', static fn () => \CartServiceGhost9af72f0::createLazyGhost(static fn ($proxy) => self::getCartServiceService($container, $proxy)));
        }

        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/CartService.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/Cart/CartItemComparator.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/Cart/ProductClassComparator.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/Cart/CartItemAllocator.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/Cart/SaleTypeCartAllocator.php';

        return ($lazyLoad->__construct(($container->privates['Eccube\\Session\\Session'] ?? self::getSessionService($container)), ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container)), ($container->privates['Eccube\\Repository\\ProductClassRepository'] ?? self::getProductClassRepositoryService($container)), ($container->privates['Eccube\\Repository\\CartRepository'] ?? self::getCartRepositoryService($container)), new \Eccube\Service\Cart\ProductClassComparator(), new \Eccube\Service\Cart\SaleTypeCartAllocator(), ($container->privates['Eccube\\Repository\\OrderRepository'] ?? self::getOrderRepositoryService($container)), ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), ($container->privates['security.authorization_checker'] ?? self::getSecurity_AuthorizationCheckerService($container))) && false ?: $lazyLoad);
    }

    /*
     * Gets the private 'Eccube\Service\TwoFactorAuthService' shared autowired service.
     *
     * @return \Eccube\Service\TwoFactorAuthService
     */
    protected static function getTwoFactorAuthServiceService($container)
    {
        return $container->privates['Eccube\\Service\\TwoFactorAuthService'] = new \Eccube\Service\TwoFactorAuthService(($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container)), ($container->privates['security.password_hasher_factory'] ?? self::getSecurity_PasswordHasherFactoryService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /*
     * Gets the private 'Eccube\Session\Session' shared autowired service.
     *
     * @return \Eccube\Session\Session
     */
    protected static function getSessionService($container)
    {
        return $container->privates['Eccube\\Session\\Session'] = new \Eccube\Session\Session(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /*
     * Gets the private 'Eccube\Twig\Extension\EccubeExtension' shared autowired service.
     *
     * @return \Eccube\Twig\Extension\EccubeExtension
     */
    protected static function getEccubeExtensionService($container)
    {
        return $container->privates['Eccube\\Twig\\Extension\\EccubeExtension'] = new \Eccube\Twig\Extension\EccubeExtension(($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container)), ($container->privates['Eccube\\Repository\\ProductRepository'] ?? self::getProductRepositoryService($container)));
    }

    /*
     * Gets the private 'Eccube\Twig\Extension\TaxExtension' shared autowired service.
     *
     * @return \Eccube\Twig\Extension\TaxExtension
     */
    protected static function getTaxExtensionService($container)
    {
        return $container->privates['Eccube\\Twig\\Extension\\TaxExtension'] = new \Eccube\Twig\Extension\TaxExtension(($container->privates['Eccube\\Repository\\TaxRuleRepository'] ?? self::getTaxRuleRepositoryService($container)));
    }

    /*
     * Gets the private 'Symfony\Bridge\Monolog\Processor\WebProcessor' shared autowired service.
     *
     * @return \Symfony\Bridge\Monolog\Processor\WebProcessor
     */
    protected static function getWebProcessorService($container)
    {
        return $container->privates['Symfony\\Bridge\\Monolog\\Processor\\WebProcessor'] = new \Symfony\Bridge\Monolog\Processor\WebProcessor(['url' => 'REQUEST_URI', 'ip' => 'REMOTE_ADDR', 'http_method' => 'REQUEST_METHOD', 'server' => 'SERVER_NAME', 'referrer' => 'HTTP_REFERER', 'user_agent' => 'HTTP_USER_AGENT']);
    }

    /*
     * Gets the private 'argument_resolver.request_payload' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver
     */
    protected static function getArgumentResolver_RequestPayloadService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['argument_resolver.request_payload'] = $container->createProxy('RequestPayloadValueResolverGhostBda5a91', static fn () => \RequestPayloadValueResolverGhostBda5a91::createLazyGhost(static fn ($proxy) => self::getArgumentResolver_RequestPayloadService($container, $proxy)));
        }

        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/RequestPayloadValueResolver.php';

        return ($lazyLoad->__construct(($container->privates['serializer'] ?? self::getSerializerService($container)), ($container->privates['validator'] ?? self::getValidatorService($container)), ($container->services['translator'] ?? self::getTranslatorService($container))) && false ?: $lazyLoad);
    }

    /*
     * Gets the private 'assets.context' shared service.
     *
     * @return \Symfony\Component\Asset\Context\RequestStackContext
     */
    protected static function getAssets_ContextService($container)
    {
        $a = ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container));

        return $container->privates['assets.context'] = new \Symfony\Component\Asset\Context\RequestStackContext(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a->getBaseUrl(), $a->isSecure());
    }

    /*
     * Gets the private 'cache.property_access' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_PropertyAccessService($container)
    {
        return $container->privates['cache.property_access'] = \Symfony\Component\PropertyAccess\PropertyAccessor::createCache('vtFsGsGR0d', 0, $container->getParameter('container.build_id'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the private 'cache.property_info' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_PropertyInfoService($container)
    {
        return $container->privates['cache.property_info'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('KzggsJRwqu', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the private 'cache.serializer' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_SerializerService($container)
    {
        return $container->privates['cache.serializer'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('RfuxAOt871', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the private 'cache.validator' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_ValidatorService($container)
    {
        return $container->privates['cache.validator'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('WIZaH2FaBJ', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the private 'controller.is_granted_attribute_listener' shared service.
     *
     * @return \Symfony\Component\Security\Http\EventListener\IsGrantedAttributeListener
     */
    protected static function getController_IsGrantedAttributeListenerService($container)
    {
        return $container->privates['controller.is_granted_attribute_listener'] = new \Symfony\Component\Security\Http\EventListener\IsGrantedAttributeListener(($container->privates['security.authorization_checker'] ?? self::getSecurity_AuthorizationCheckerService($container)), new \Symfony\Component\ExpressionLanguage\ExpressionLanguage(($container->services['cache.security_is_granted_attribute_expression_language'] ?? self::getCache_SecurityIsGrantedAttributeExpressionLanguageService($container))));
    }

    /*
     * Gets the private 'doctrine.app_cache_pool' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    protected static function getDoctrine_AppCachePoolService($container)
    {
        $container->privates['doctrine.app_cache_pool'] = $instance = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('SuvUs69B5f', 0, ($container->targetDir.''.'/pools/app'), ($container->privates['cache.default_marshaller'] ??= new \Symfony\Component\Cache\Marshaller\DefaultMarshaller(NULL, false)));

        $instance->setLogger(($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));

        return $instance;
    }

    /*
     * Gets the private 'doctrine.dbal.default_connection.event_manager' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\ContainerAwareEventManager
     */
    protected static function getDoctrine_Dbal_DefaultConnection_EventManagerService($container)
    {
        return $container->privates['doctrine.dbal.default_connection.event_manager'] = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Eccube\\Doctrine\\EventSubscriber\\InitSubscriber' => ['privates', 'Eccube\\Doctrine\\EventSubscriber\\InitSubscriber', 'getInitSubscriberService', true],
            'Eccube\\Doctrine\\EventSubscriber\\SaveEventSubscriber' => ['privates', 'Eccube\\Doctrine\\EventSubscriber\\SaveEventSubscriber', 'getSaveEventSubscriberService', true],
            'Eccube\\Doctrine\\EventSubscriber\\TaxRuleEventSubscriber' => ['privates', 'Eccube\\Doctrine\\EventSubscriber\\TaxRuleEventSubscriber', 'getTaxRuleEventSubscriberService', true],
            'doctrine.orm.default_listeners.attach_entity_listeners' => ['privates', 'doctrine.orm.default_listeners.attach_entity_listeners', 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService', true],
            'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener' => ['privates', 'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener', 'getDoctrine_Orm_Listeners_DoctrineDbalCacheAdapterSchemaListenerService', true],
            'doctrine.orm.listeners.doctrine_token_provider_schema_listener' => ['privates', 'doctrine.orm.listeners.doctrine_token_provider_schema_listener', 'getDoctrine_Orm_Listeners_DoctrineTokenProviderSchemaListenerService', true],
            'doctrine.orm.listeners.lock_store_schema_listener' => ['privates', 'doctrine.orm.listeners.lock_store_schema_listener', 'getDoctrine_Orm_Listeners_LockStoreSchemaListenerService', true],
            'doctrine.orm.listeners.pdo_session_handler_schema_listener' => ['privates', 'doctrine.orm.listeners.pdo_session_handler_schema_listener', 'getDoctrine_Orm_Listeners_PdoSessionHandlerSchemaListenerService', true],
        ], [
            'Eccube\\Doctrine\\EventSubscriber\\InitSubscriber' => '?',
            'Eccube\\Doctrine\\EventSubscriber\\SaveEventSubscriber' => '?',
            'Eccube\\Doctrine\\EventSubscriber\\TaxRuleEventSubscriber' => '?',
            'doctrine.orm.default_listeners.attach_entity_listeners' => '?',
            'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener' => '?',
            'doctrine.orm.listeners.doctrine_token_provider_schema_listener' => '?',
            'doctrine.orm.listeners.lock_store_schema_listener' => '?',
            'doctrine.orm.listeners.pdo_session_handler_schema_listener' => '?',
        ]), ['Eccube\\Doctrine\\EventSubscriber\\InitSubscriber', 'Eccube\\Doctrine\\EventSubscriber\\SaveEventSubscriber', 'Eccube\\Doctrine\\EventSubscriber\\TaxRuleEventSubscriber', [['postGenerateSchema'], 'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.doctrine_token_provider_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.pdo_session_handler_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.lock_store_schema_listener'], [['loadClassMetadata'], 'doctrine.orm.default_listeners.attach_entity_listeners']]);
    }

    /*
     * Gets the private 'eccube.log.formatter.line' shared autowired service.
     *
     * @return \Monolog\Formatter\LineFormatter
     */
    protected static function getEccube_Log_Formatter_LineService($container)
    {
        return $container->privates['eccube.log.formatter.line'] = new \Monolog\Formatter\LineFormatter('[%datetime%] %channel%.%level_name% [%extra.session_id%] [%extra.uid%] [%extra.user_id%] [%extra.class%:%extra.function%:%extra.line%] - %message% %context% [%extra.http_method%, %extra.url%, %extra.ip%, %extra.referrer%, %extra.user_agent%]'."\n".'');
    }

    /*
     * Gets the private 'esi_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SurrogateListener
     */
    protected static function getEsiListenerService($container)
    {
        return $container->privates['esi_listener'] = new \Symfony\Component\HttpKernel\EventListener\SurrogateListener(($container->privates['esi'] ??= new \Symfony\Component\HttpKernel\HttpCache\Esi()));
    }

    /*
     * Gets the private 'exception_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ErrorListener
     */
    protected static function getExceptionListener2Service($container)
    {
        return $container->privates['exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ErrorListener('error_controller', ($container->privates['monolog.logger.request'] ?? self::getMonolog_Logger_RequestService($container)), false, []);
    }

    /*
     * Gets the private 'fragment.listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener
     */
    protected static function getFragment_ListenerService($container)
    {
        return $container->privates['fragment.listener'] = new \Symfony\Component\HttpKernel\EventListener\FragmentListener(($container->privates['uri_signer'] ??= new \Symfony\Component\HttpFoundation\UriSigner($container->getEnv('ECCUBE_AUTH_MAGIC'))), '/_fragment');
    }

    /*
     * Gets the private 'framework_extra_bundle.argument_name_convertor' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ArgumentNameConverter
     */
    protected static function getFrameworkExtraBundle_ArgumentNameConvertorService($container)
    {
        return $container->privates['framework_extra_bundle.argument_name_convertor'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ArgumentNameConverter(($container->privates['argument_metadata_factory'] ??= new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory()));
    }

    /*
     * Gets the private 'framework_extra_bundle.event.is_granted' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\IsGrantedListener
     */
    protected static function getFrameworkExtraBundle_Event_IsGrantedService($container)
    {
        return $container->privates['framework_extra_bundle.event.is_granted'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\IsGrantedListener(($container->privates['framework_extra_bundle.argument_name_convertor'] ?? self::getFrameworkExtraBundle_ArgumentNameConvertorService($container)), ($container->privates['security.authorization_checker'] ?? self::getSecurity_AuthorizationCheckerService($container)));
    }

    /*
     * Gets the private 'knp_paginator.subscriber.sliding_pagination' shared service.
     *
     * @return \Knp\Bundle\PaginatorBundle\Subscriber\SlidingPaginationSubscriber
     */
    protected static function getKnpPaginator_Subscriber_SlidingPaginationService($container)
    {
        return $container->privates['knp_paginator.subscriber.sliding_pagination'] = new \Knp\Bundle\PaginatorBundle\Subscriber\SlidingPaginationSubscriber(['defaultPaginationTemplate' => '@KnpPaginator/Pagination/sliding.html.twig', 'defaultSortableTemplate' => '@KnpPaginator/Pagination/sortable_link.html.twig', 'defaultFiltrationTemplate' => '@KnpPaginator/Pagination/filtration.html.twig', 'defaultPageRange' => 5, 'defaultPageLimit' => NULL]);
    }

    /*
     * Gets the private 'locale_aware_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener
     */
    protected static function getLocaleAwareListenerService($container)
    {
        return $container->privates['locale_aware_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['slugger'] ??= new \Symfony\Component\String\Slugger\AsciiSlugger($container->getEnv('ECCUBE_LOCALE')));
            yield 1 => ($container->services['translator'] ?? self::getTranslatorService($container));
            yield 2 => ($container->privates['translation.locale_switcher'] ?? self::getTranslation_LocaleSwitcherService($container));
        }, 3), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /*
     * Gets the private 'locale_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener
     */
    protected static function getLocaleListenerService($container)
    {
        return $container->privates['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $container->getEnv('ECCUBE_LOCALE'), ($container->services['router'] ?? self::getRouterService($container)), false, []);
    }

    /*
     * Gets the private 'mime_types' shared service.
     *
     * @return \Symfony\Component\Mime\MimeTypes
     */
    protected static function getMimeTypesService($container)
    {
        $container->privates['mime_types'] = $instance = new \Symfony\Component\Mime\MimeTypes();

        $instance->setDefault($instance);

        return $instance;
    }

    /*
     * Gets the private 'monolog.handler.admin' shared service.
     *
     * @return \Monolog\Handler\FingersCrossedHandler
     */
    protected static function getMonolog_Handler_AdminService($container)
    {
        $a = new \Monolog\Handler\RotatingFileHandler((\dirname(__DIR__, 3).'/log/prod/admin.log'), 60, 'debug', true, NULL, false);
        $a->pushProcessor(($container->privates['monolog.processor.psr_log_message'] ??= new \Monolog\Processor\PsrLogMessageProcessor()));
        $a->setFilenameFormat('{filename}-{date}', 'Y-m-d');
        $a->setFormatter(($container->privates['eccube.log.formatter.line'] ?? self::getEccube_Log_Formatter_LineService($container)));

        return $container->privates['monolog.handler.admin'] = new \Monolog\Handler\FingersCrossedHandler($a, new \Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy('error'), 0, true, true, 'info');
    }

    /*
     * Gets the private 'monolog.handler.console' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler
     */
    protected static function getMonolog_Handler_ConsoleService($container)
    {
        return $container->privates['monolog.handler.console'] = new \Symfony\Bridge\Monolog\Handler\ConsoleHandler(NULL, true, [], []);
    }

    /*
     * Gets the private 'monolog.handler.front' shared service.
     *
     * @return \Monolog\Handler\FingersCrossedHandler
     */
    protected static function getMonolog_Handler_FrontService($container)
    {
        $a = new \Monolog\Handler\RotatingFileHandler((\dirname(__DIR__, 3).'/log/prod/front.log'), 60, 'debug', true, NULL, false);
        $a->pushProcessor(($container->privates['monolog.processor.psr_log_message'] ??= new \Monolog\Processor\PsrLogMessageProcessor()));
        $a->setFilenameFormat('{filename}-{date}', 'Y-m-d');
        $a->setFormatter(($container->privates['eccube.log.formatter.line'] ?? self::getEccube_Log_Formatter_LineService($container)));

        return $container->privates['monolog.handler.front'] = new \Monolog\Handler\FingersCrossedHandler($a, new \Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy('error'), 0, true, true, 'info');
    }

    /*
     * Gets the private 'monolog.handler.main' shared service.
     *
     * @return \Monolog\Handler\FingersCrossedHandler
     */
    protected static function getMonolog_Handler_MainService($container)
    {
        $a = new \Monolog\Handler\RotatingFileHandler((\dirname(__DIR__, 3).'/log/prod/site.log'), 60, 'debug', true, NULL, false);
        $a->pushProcessor(($container->privates['monolog.processor.psr_log_message'] ??= new \Monolog\Processor\PsrLogMessageProcessor()));
        $a->setFilenameFormat('{filename}-{date}', 'Y-m-d');
        $a->setFormatter(($container->privates['eccube.log.formatter.line'] ?? self::getEccube_Log_Formatter_LineService($container)));

        return $container->privates['monolog.handler.main'] = new \Monolog\Handler\FingersCrossedHandler($a, new \Monolog\Handler\FingersCrossed\ErrorLevelActivationStrategy('error'), 0, true, true, 'info');
    }

    /*
     * Gets the private 'monolog.logger' shared service.
     *
     * @return \Monolog\Logger
     */
    protected static function getMonolog_LoggerService($container)
    {
        $container->privates['monolog.logger'] = $instance = new \Monolog\Logger('app');

        $instance->pushProcessor(($container->privates['Eccube\\Log\\Processor\\SessionProcessor'] ?? self::getSessionProcessorService($container)));
        $instance->pushProcessor(($container->privates['Eccube\\Log\\Processor\\TokenProcessor'] ?? self::getTokenProcessorService($container)));
        $instance->pushProcessor(($container->privates['Monolog\\Processor\\UidProcessor'] ??= new \Monolog\Processor\UidProcessor()));
        $instance->pushProcessor(($container->privates['Monolog\\Processor\\IntrospectionProcessor'] ??= new \Monolog\Processor\IntrospectionProcessor(100, ['Eccube\\\\Log', 'Psr\\\\Log'])));
        $instance->pushProcessor(($container->privates['Symfony\\Bridge\\Monolog\\Processor\\WebProcessor'] ?? self::getWebProcessorService($container)));
        $instance->useMicrosecondTimestamps(true);
        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.admin'] ?? self::getMonolog_Handler_AdminService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.front'] ?? self::getMonolog_Handler_FrontService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.cache' shared service.
     *
     * @return \Monolog\Logger
     */
    protected static function getMonolog_Logger_CacheService($container)
    {
        $container->privates['monolog.logger.cache'] = $instance = new \Monolog\Logger('cache');

        $instance->pushProcessor(($container->privates['Eccube\\Log\\Processor\\SessionProcessor'] ?? self::getSessionProcessorService($container)));
        $instance->pushProcessor(($container->privates['Eccube\\Log\\Processor\\TokenProcessor'] ?? self::getTokenProcessorService($container)));
        $instance->pushProcessor(($container->privates['Monolog\\Processor\\UidProcessor'] ??= new \Monolog\Processor\UidProcessor()));
        $instance->pushProcessor(($container->privates['Monolog\\Processor\\IntrospectionProcessor'] ??= new \Monolog\Processor\IntrospectionProcessor(100, ['Eccube\\\\Log', 'Psr\\\\Log'])));
        $instance->pushProcessor(($container->privates['Symfony\\Bridge\\Monolog\\Processor\\WebProcessor'] ?? self::getWebProcessorService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.request' shared service.
     *
     * @return \Monolog\Logger
     */
    protected static function getMonolog_Logger_RequestService($container)
    {
        $container->privates['monolog.logger.request'] = $instance = new \Monolog\Logger('request');

        $instance->pushProcessor(($container->privates['Eccube\\Log\\Processor\\SessionProcessor'] ?? self::getSessionProcessorService($container)));
        $instance->pushProcessor(($container->privates['Eccube\\Log\\Processor\\TokenProcessor'] ?? self::getTokenProcessorService($container)));
        $instance->pushProcessor(($container->privates['Monolog\\Processor\\UidProcessor'] ??= new \Monolog\Processor\UidProcessor()));
        $instance->pushProcessor(($container->privates['Monolog\\Processor\\IntrospectionProcessor'] ??= new \Monolog\Processor\IntrospectionProcessor(100, ['Eccube\\\\Log', 'Psr\\\\Log'])));
        $instance->pushProcessor(($container->privates['Symfony\\Bridge\\Monolog\\Processor\\WebProcessor'] ?? self::getWebProcessorService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.security' shared service.
     *
     * @return \Monolog\Logger
     */
    protected static function getMonolog_Logger_SecurityService($container)
    {
        $container->privates['monolog.logger.security'] = $instance = new \Monolog\Logger('security');

        $instance->pushProcessor(($container->privates['Eccube\\Log\\Processor\\SessionProcessor'] ?? self::getSessionProcessorService($container)));
        $instance->pushProcessor(($container->privates['Eccube\\Log\\Processor\\TokenProcessor'] ?? self::getTokenProcessorService($container)));
        $instance->pushProcessor(($container->privates['Monolog\\Processor\\UidProcessor'] ??= new \Monolog\Processor\UidProcessor()));
        $instance->pushProcessor(($container->privates['Monolog\\Processor\\IntrospectionProcessor'] ??= new \Monolog\Processor\IntrospectionProcessor(100, ['Eccube\\\\Log', 'Psr\\\\Log'])));
        $instance->pushProcessor(($container->privates['Symfony\\Bridge\\Monolog\\Processor\\WebProcessor'] ?? self::getWebProcessorService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));

        return $instance;
    }

    /*
     * Gets the private 'parameter_bag' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag
     */
    protected static function getParameterBagService($container)
    {
        return $container->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container);
    }

    /*
     * Gets the private 'property_accessor' shared service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor
     */
    protected static function getPropertyAccessorService($container)
    {
        $a = ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());

        return $container->privates['property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor(3, 2, ($container->privates['cache.property_access'] ?? self::getCache_PropertyAccessService($container)), $a, $a);
    }

    /*
     * Gets the private 'property_info.cache' shared service.
     *
     * @return \Symfony\Component\PropertyInfo\PropertyInfoCacheExtractor
     */
    protected static function getPropertyInfo_CacheService($container)
    {
        return $container->privates['property_info.cache'] = new \Symfony\Component\PropertyInfo\PropertyInfoCacheExtractor(new \Symfony\Component\PropertyInfo\PropertyInfoExtractor(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.serializer_extractor'] ?? $container->load('getPropertyInfo_SerializerExtractorService'));
            yield 1 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
            yield 2 => ($container->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $container->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
        }, 3), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $container->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
            yield 1 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 2), new RewindableGenerator(fn () => new \EmptyIterator(), 0), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $container->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
            yield 1 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 2), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 1)), ($container->privates['cache.property_info'] ?? self::getCache_PropertyInfoService($container)));
    }

    /*
     * Gets the private 'router.expression_language_provider' shared service.
     *
     * @return \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider
     */
    protected static function getRouter_ExpressionLanguageProviderService($container)
    {
        return $container->privates['router.expression_language_provider'] = new \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'env' => ['privates', 'container.getenv', 'getContainer_GetenvService', true],
            'service' => ['services', 'container.get_routing_condition_service', 'getContainer_GetRoutingConditionServiceService', true],
        ], [
            'env' => 'Closure',
            'service' => 'Closure',
        ]));
    }

    /*
     * Gets the private 'router.request_context' shared service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected static function getRouter_RequestContextService($container)
    {
        $container->privates['router.request_context'] = $instance = \Symfony\Component\Routing\RequestContext::fromUri('', 'localhost', 'http', 80, 443);

        $instance->setParameter('_functions', ($container->privates['router.expression_language_provider'] ?? self::getRouter_ExpressionLanguageProviderService($container)));

        return $instance;
    }

    /*
     * Gets the private 'router_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener
     */
    protected static function getRouterListenerService($container)
    {
        return $container->privates['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener(($container->services['router'] ?? self::getRouterService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)), ($container->privates['monolog.logger.request'] ?? self::getMonolog_Logger_RequestService($container)), \dirname(__DIR__, 4), false);
    }

    /*
     * Gets the private 'security.access.decision_manager' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AccessDecisionManager
     */
    protected static function getSecurity_Access_DecisionManagerService($container)
    {
        return $container->privates['security.access.decision_manager'] = new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['security.access.authenticated_voter'] ?? $container->load('getSecurity_Access_AuthenticatedVoterService'));
            yield 1 => ($container->privates['security.access.simple_role_voter'] ??= new \Symfony\Component\Security\Core\Authorization\Voter\RoleVoter());
            yield 2 => ($container->privates['security.access.expression_voter'] ?? $container->load('getSecurity_Access_ExpressionVoterService'));
            yield 3 => ($container->privates['Eccube\\Security\\Voter\\AuthorityVoter'] ?? $container->load('getAuthorityVoterService'));
        }, 4), new \Symfony\Component\Security\Core\Authorization\Strategy\UnanimousStrategy(false));
    }

    /*
     * Gets the private 'security.authorization_checker' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker
     */
    protected static function getSecurity_AuthorizationCheckerService($container)
    {
        $a = ($container->privates['security.access.decision_manager'] ?? self::getSecurity_Access_DecisionManagerService($container));

        if (isset($container->privates['security.authorization_checker'])) {
            return $container->privates['security.authorization_checker'];
        }

        return $container->privates['security.authorization_checker'] = new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker(($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), $a, false, false);
    }

    /*
     * Gets the private 'security.context_listener.0' shared service.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ContextListener
     */
    protected static function getSecurity_ContextListener_0Service($container)
    {
        return $container->privates['security.context_listener.0'] = new \Symfony\Component\Security\Http\Firewall\ContextListener(($container->privates['security.untracked_token_storage'] ??= new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Eccube\\Security\\Core\\User\\MemberProvider'] ?? $container->load('getMemberProviderService'));
            yield 1 => ($container->privates['Eccube\\Security\\Core\\User\\CustomerProvider'] ?? $container->load('getCustomerProviderService'));
        }, 2), 'admin', ($container->privates['monolog.logger.security'] ?? self::getMonolog_Logger_SecurityService($container)), ($container->privates['security.event_dispatcher.admin'] ?? self::getSecurity_EventDispatcher_AdminService($container)), ($container->privates['security.authentication.trust_resolver'] ??= new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver()), [($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), 'enableUsageTracking']);
    }

    /*
     * Gets the private 'security.context_listener.1' shared service.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ContextListener
     */
    protected static function getSecurity_ContextListener_1Service($container)
    {
        return $container->privates['security.context_listener.1'] = new \Symfony\Component\Security\Http\Firewall\ContextListener(($container->privates['security.untracked_token_storage'] ??= new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Eccube\\Security\\Core\\User\\MemberProvider'] ?? $container->load('getMemberProviderService'));
            yield 1 => ($container->privates['Eccube\\Security\\Core\\User\\CustomerProvider'] ?? $container->load('getCustomerProviderService'));
        }, 2), 'customer', ($container->privates['monolog.logger.security'] ?? self::getMonolog_Logger_SecurityService($container)), ($container->privates['security.event_dispatcher.customer'] ?? self::getSecurity_EventDispatcher_CustomerService($container)), ($container->privates['security.authentication.trust_resolver'] ??= new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver()), [($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), 'enableUsageTracking']);
    }

    /*
     * Gets the private 'security.csrf.token_manager' shared service.
     *
     * @return \Symfony\Component\Security\Csrf\CsrfTokenManager
     */
    protected static function getSecurity_Csrf_TokenManagerService($container)
    {
        return $container->privates['security.csrf.token_manager'] = new \Symfony\Component\Security\Csrf\CsrfTokenManager(new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator(), ($container->privates['security.csrf.token_storage'] ?? self::getSecurity_Csrf_TokenStorageService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /*
     * Gets the private 'security.csrf.token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage
     */
    protected static function getSecurity_Csrf_TokenStorageService($container)
    {
        return $container->privates['security.csrf.token_storage'] = new \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /*
     * Gets the private 'security.event_dispatcher.admin' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected static function getSecurity_EventDispatcher_AdminService($container)
    {
        $container->privates['security.event_dispatcher.admin'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.admin.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.admin.user_provider'] ?? $container->load('getSecurity_Listener_Admin_UserProviderService')), 'checkPassport'], 2048);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.session.admin', class: 'Symfony\\Component\\Security\\Http\\EventListener\\SessionStrategyListener')] fn () => ($container->privates['security.listener.session.admin'] ?? $container->load('getSecurity_Listener_Session_AdminService')), 'onSuccessfulLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.default.admin', class: 'Symfony\\Component\\Security\\Http\\EventListener\\DefaultLogoutListener')] fn () => ($container->privates['security.logout.listener.default.admin'] ?? $container->load('getSecurity_Logout_Listener_Default_AdminService')), 'onLogout'], 64);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.session.admin', class: 'Symfony\\Component\\Security\\Http\\EventListener\\SessionLogoutListener')] fn () => ($container->privates['security.logout.listener.session.admin'] ??= new \Symfony\Component\Security\Http\EventListener\SessionLogoutListener()), 'onLogout'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.login_throttling.admin', class: 'Symfony\\Component\\Security\\Http\\EventListener\\LoginThrottlingListener')] fn () => ($container->privates['security.listener.login_throttling.admin'] ?? $container->load('getSecurity_Listener_LoginThrottling_AdminService')), 'checkPassport'], 2080);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent', [#[\Closure(name: 'security.listener.login_throttling.admin', class: 'Symfony\\Component\\Security\\Http\\EventListener\\LoginThrottlingListener')] fn () => ($container->privates['security.listener.login_throttling.admin'] ?? $container->load('getSecurity_Listener_LoginThrottling_AdminService')), 'onFailedLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.login_throttling.admin', class: 'Symfony\\Component\\Security\\Http\\EventListener\\LoginThrottlingListener')] fn () => ($container->privates['security.listener.login_throttling.admin'] ?? $container->load('getSecurity_Listener_LoginThrottling_AdminService')), 'onSuccessfulLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_checker.admin', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] fn () => ($container->privates['security.listener.user_checker.admin'] ?? $container->load('getSecurity_Listener_UserChecker_AdminService')), 'preCheckCredentials'], 256);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'security.listener.user_checker.admin', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] fn () => ($container->privates['security.listener.user_checker.admin'] ?? $container->load('getSecurity_Listener_UserChecker_AdminService')), 'postCheckCredentials'], 256);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.user_provider'] ?? $container->load('getSecurity_Listener_UserProviderService')), 'checkPassport'], 1024);
        $instance->addListener('security.interactive_login', [#[\Closure(name: 'Eccube\\EventListener\\LoginHistoryListener')] fn () => ($container->privates['Eccube\\EventListener\\LoginHistoryListener'] ?? $container->load('getLoginHistoryListenerService')), 'onInteractiveLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent', [#[\Closure(name: 'Eccube\\EventListener\\LoginHistoryListener')] fn () => ($container->privates['Eccube\\EventListener\\LoginHistoryListener'] ?? $container->load('getLoginHistoryListenerService')), 'onAuthenticationFailure'], 0);
        $instance->addListener('security.interactive_login', [#[\Closure(name: 'Eccube\\EventListener\\SecurityListener')] fn () => ($container->privates['Eccube\\EventListener\\SecurityListener'] ?? $container->load('getSecurityListenerService')), 'onInteractiveLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent', [#[\Closure(name: 'Eccube\\EventListener\\SecurityListener')] fn () => ($container->privates['Eccube\\EventListener\\SecurityListener'] ?? $container->load('getSecurityListenerService')), 'onAuthenticationFailure'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'Eccube\\Security\\Http\\Authentication\\EccubeLogoutSuccessHandler')] fn () => ($container->privates['Eccube\\Security\\Http\\Authentication\\EccubeLogoutSuccessHandler'] ?? $container->load('getEccubeLogoutSuccessHandlerService')), 'onLogout'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'eccube.security.logout.success_handler', class: 'Eccube\\Security\\Http\\Authentication\\EccubeLogoutSuccessHandler')] fn () => ($container->privates['eccube.security.logout.success_handler'] ?? $container->load('getEccube_Security_Logout_SuccessHandlerService')), 'onLogout'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.check_authenticator_credentials', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckCredentialsListener')] fn () => ($container->privates['security.listener.check_authenticator_credentials'] ?? $container->load('getSecurity_Listener_CheckAuthenticatorCredentialsService')), 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.password_migrating', class: 'Symfony\\Component\\Security\\Http\\EventListener\\PasswordMigratingListener')] fn () => ($container->privates['security.listener.password_migrating'] ?? $container->load('getSecurity_Listener_PasswordMigratingService')), 'onLoginSuccess'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.csrf_protection', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfProtectionListener')] fn () => ($container->privates['security.listener.csrf_protection'] ?? $container->load('getSecurity_Listener_CsrfProtectionService')), 'checkPassport'], 512);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.csrf_token_clearing', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfTokenClearingLogoutListener')] fn () => ($container->privates['security.logout.listener.csrf_token_clearing'] ?? $container->load('getSecurity_Logout_Listener_CsrfTokenClearingService')), 'onLogout'], 0);

        return $instance;
    }

    /*
     * Gets the private 'security.event_dispatcher.customer' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected static function getSecurity_EventDispatcher_CustomerService($container)
    {
        $container->privates['security.event_dispatcher.customer'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.customer.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.customer.user_provider'] ?? $container->load('getSecurity_Listener_Customer_UserProviderService')), 'checkPassport'], 2048);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.session.customer', class: 'Symfony\\Component\\Security\\Http\\EventListener\\SessionStrategyListener')] fn () => ($container->privates['security.listener.session.customer'] ?? $container->load('getSecurity_Listener_Session_CustomerService')), 'onSuccessfulLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.default.customer', class: 'Symfony\\Component\\Security\\Http\\EventListener\\DefaultLogoutListener')] fn () => ($container->privates['security.logout.listener.default.customer'] ?? $container->load('getSecurity_Logout_Listener_Default_CustomerService')), 'onLogout'], 64);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.session.customer', class: 'Symfony\\Component\\Security\\Http\\EventListener\\SessionLogoutListener')] fn () => ($container->privates['security.logout.listener.session.customer'] ??= new \Symfony\Component\Security\Http\EventListener\SessionLogoutListener()), 'onLogout'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.login_throttling.customer', class: 'Symfony\\Component\\Security\\Http\\EventListener\\LoginThrottlingListener')] fn () => ($container->privates['security.listener.login_throttling.customer'] ?? $container->load('getSecurity_Listener_LoginThrottling_CustomerService')), 'checkPassport'], 2080);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent', [#[\Closure(name: 'security.listener.login_throttling.customer', class: 'Symfony\\Component\\Security\\Http\\EventListener\\LoginThrottlingListener')] fn () => ($container->privates['security.listener.login_throttling.customer'] ?? $container->load('getSecurity_Listener_LoginThrottling_CustomerService')), 'onFailedLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.login_throttling.customer', class: 'Symfony\\Component\\Security\\Http\\EventListener\\LoginThrottlingListener')] fn () => ($container->privates['security.listener.login_throttling.customer'] ?? $container->load('getSecurity_Listener_LoginThrottling_CustomerService')), 'onSuccessfulLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.check_remember_me_conditions.customer', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckRememberMeConditionsListener')] fn () => ($container->privates['security.listener.check_remember_me_conditions.customer'] ?? $container->load('getSecurity_Listener_CheckRememberMeConditions_CustomerService')), 'onSuccessfulLogin'], -32);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.remember_me.customer', class: 'Symfony\\Component\\Security\\Http\\EventListener\\RememberMeListener')] fn () => ($container->privates['security.listener.remember_me.customer'] ?? $container->load('getSecurity_Listener_RememberMe_CustomerService')), 'onSuccessfulLogin'], -64);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent', [#[\Closure(name: 'security.listener.remember_me.customer', class: 'Symfony\\Component\\Security\\Http\\EventListener\\RememberMeListener')] fn () => ($container->privates['security.listener.remember_me.customer'] ?? $container->load('getSecurity_Listener_RememberMe_CustomerService')), 'clearCookie'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.listener.remember_me.customer', class: 'Symfony\\Component\\Security\\Http\\EventListener\\RememberMeListener')] fn () => ($container->privates['security.listener.remember_me.customer'] ?? $container->load('getSecurity_Listener_RememberMe_CustomerService')), 'clearCookie'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\TokenDeauthenticatedEvent', [#[\Closure(name: 'security.listener.remember_me.customer', class: 'Symfony\\Component\\Security\\Http\\EventListener\\RememberMeListener')] fn () => ($container->privates['security.listener.remember_me.customer'] ?? $container->load('getSecurity_Listener_RememberMe_CustomerService')), 'clearCookie'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_checker.customer', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] fn () => ($container->privates['security.listener.user_checker.customer'] ?? $container->load('getSecurity_Listener_UserChecker_CustomerService')), 'preCheckCredentials'], 256);
        $instance->addListener('security.authentication.success', [#[\Closure(name: 'security.listener.user_checker.customer', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserCheckerListener')] fn () => ($container->privates['security.listener.user_checker.customer'] ?? $container->load('getSecurity_Listener_UserChecker_CustomerService')), 'postCheckCredentials'], 256);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.user_provider'] ?? $container->load('getSecurity_Listener_UserProviderService')), 'checkPassport'], 1024);
        $instance->addListener('security.interactive_login', [#[\Closure(name: 'Eccube\\EventListener\\LoginHistoryListener')] fn () => ($container->privates['Eccube\\EventListener\\LoginHistoryListener'] ?? $container->load('getLoginHistoryListenerService')), 'onInteractiveLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent', [#[\Closure(name: 'Eccube\\EventListener\\LoginHistoryListener')] fn () => ($container->privates['Eccube\\EventListener\\LoginHistoryListener'] ?? $container->load('getLoginHistoryListenerService')), 'onAuthenticationFailure'], 0);
        $instance->addListener('security.interactive_login', [#[\Closure(name: 'Eccube\\EventListener\\SecurityListener')] fn () => ($container->privates['Eccube\\EventListener\\SecurityListener'] ?? $container->load('getSecurityListenerService')), 'onInteractiveLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent', [#[\Closure(name: 'Eccube\\EventListener\\SecurityListener')] fn () => ($container->privates['Eccube\\EventListener\\SecurityListener'] ?? $container->load('getSecurityListenerService')), 'onAuthenticationFailure'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'Eccube\\Security\\Http\\Authentication\\EccubeLogoutSuccessHandler')] fn () => ($container->privates['Eccube\\Security\\Http\\Authentication\\EccubeLogoutSuccessHandler'] ?? $container->load('getEccubeLogoutSuccessHandlerService')), 'onLogout'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'eccube.security.logout.success_handler', class: 'Eccube\\Security\\Http\\Authentication\\EccubeLogoutSuccessHandler')] fn () => ($container->privates['eccube.security.logout.success_handler'] ?? $container->load('getEccube_Security_Logout_SuccessHandlerService')), 'onLogout'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.check_authenticator_credentials', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckCredentialsListener')] fn () => ($container->privates['security.listener.check_authenticator_credentials'] ?? $container->load('getSecurity_Listener_CheckAuthenticatorCredentialsService')), 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.password_migrating', class: 'Symfony\\Component\\Security\\Http\\EventListener\\PasswordMigratingListener')] fn () => ($container->privates['security.listener.password_migrating'] ?? $container->load('getSecurity_Listener_PasswordMigratingService')), 'onLoginSuccess'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.csrf_protection', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfProtectionListener')] fn () => ($container->privates['security.listener.csrf_protection'] ?? $container->load('getSecurity_Listener_CsrfProtectionService')), 'checkPassport'], 512);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.csrf_token_clearing', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfTokenClearingLogoutListener')] fn () => ($container->privates['security.logout.listener.csrf_token_clearing'] ?? $container->load('getSecurity_Logout_Listener_CsrfTokenClearingService')), 'onLogout'], 0);

        return $instance;
    }

    /*
     * Gets the private 'security.firewall' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\EventListener\FirewallListener
     */
    protected static function getSecurity_FirewallService($container)
    {
        $a = ($container->privates['security.firewall.map'] ?? self::getSecurity_Firewall_MapService($container));

        if (isset($container->privates['security.firewall'])) {
            return $container->privates['security.firewall'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['security.firewall'])) {
            return $container->privates['security.firewall'];
        }

        return $container->privates['security.firewall'] = new \Symfony\Bundle\SecurityBundle\EventListener\FirewallListener($a, $b, ($container->privates['security.logout_url_generator'] ?? self::getSecurity_LogoutUrlGeneratorService($container)));
    }

    /*
     * Gets the private 'security.firewall.map' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallMap
     */
    protected static function getSecurity_Firewall_MapService($container)
    {
        $a = ($container->privates['.service_locator.HDnBBSZ'] ?? self::get_ServiceLocator_HDnBBSZService($container));

        if (isset($container->privates['security.firewall.map'])) {
            return $container->privates['security.firewall.map'];
        }

        return $container->privates['security.firewall.map'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallMap($a, new RewindableGenerator(function () use ($container) {
            yield 'security.firewall.map.context.dev' => ($container->privates['.security.request_matcher.kLbKLHa'] ?? $container->load('get_Security_RequestMatcher_KLbKLHaService'));
            yield 'security.firewall.map.context.admin' => ($container->privates['.security.request_matcher.w_Qa4pa'] ?? $container->load('get_Security_RequestMatcher_WQa4paService'));
            yield 'security.firewall.map.context.customer' => ($container->privates['.security.request_matcher.yy_ZK6T'] ?? $container->load('get_Security_RequestMatcher_YyZK6TService'));
        }, 3));
    }

    /*
     * Gets the private 'security.logout_url_generator' shared service.
     *
     * @return \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator
     */
    protected static function getSecurity_LogoutUrlGeneratorService($container)
    {
        $container->privates['security.logout_url_generator'] = $instance = new \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->services['router'] ?? self::getRouterService($container)), ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)));

        $instance->registerListener('admin', 'admin_logout', 'logout', '_csrf_token', NULL, NULL);
        $instance->registerListener('customer', 'logout', 'logout', '_csrf_token', NULL, NULL);

        return $instance;
    }

    /*
     * Gets the private 'security.password_hasher_factory' shared service.
     *
     * @return \Symfony\Component\PasswordHasher\Hasher\PasswordHasherFactory
     */
    protected static function getSecurity_PasswordHasherFactoryService($container)
    {
        return $container->privates['security.password_hasher_factory'] = new \Symfony\Component\PasswordHasher\Hasher\PasswordHasherFactory(['legacy' => new \Eccube\Security\PasswordHasher\PasswordHasher($container->getEnv('ECCUBE_AUTH_MAGIC'), 'HMAC', 'SHA256'), 'Eccube\\Entity\\Customer' => ['algorithm' => 'auto', 'migrate_from' => ['legacy'], 'hash_algorithm' => 'sha512', 'key_length' => 40, 'ignore_case' => false, 'encode_as_base64' => true, 'iterations' => 5000, 'cost' => NULL, 'memory_cost' => NULL, 'time_cost' => NULL], 'Eccube\\Entity\\Member' => ['algorithm' => 'auto', 'migrate_from' => ['legacy'], 'hash_algorithm' => 'sha512', 'key_length' => 40, 'ignore_case' => false, 'encode_as_base64' => true, 'iterations' => 5000, 'cost' => NULL, 'memory_cost' => NULL, 'time_cost' => NULL]]);
    }

    /*
     * Gets the private 'security.token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage
     */
    protected static function getSecurity_TokenStorageService($container)
    {
        return $container->privates['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage(($container->privates['security.untracked_token_storage'] ??= new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
        ], [
            'request_stack' => '?',
        ]));
    }

    /*
     * Gets the private 'sensio_framework_extra.controller.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener
     */
    protected static function getSensioFrameworkExtra_Controller_ListenerService($container)
    {
        return $container->privates['sensio_framework_extra.controller.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener(($container->privates['annotations.cached_reader'] ?? $container->load('getAnnotations_CachedReaderService')));
    }

    /*
     * Gets the private 'sensio_framework_extra.converter.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener
     */
    protected static function getSensioFrameworkExtra_Converter_ListenerService($container)
    {
        $a = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager();
        $a->add(new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter(($container->services['doctrine'] ?? self::getDoctrineService($container)), new \Symfony\Component\ExpressionLanguage\ExpressionLanguage()), 0, 'doctrine.orm');
        $a->add(new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter(), 0, 'datetime');

        return $container->privates['sensio_framework_extra.converter.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener($a, true);
    }

    /*
     * Gets the private 'sensio_framework_extra.security.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener
     */
    protected static function getSensioFrameworkExtra_Security_ListenerService($container)
    {
        return $container->privates['sensio_framework_extra.security.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener(($container->privates['framework_extra_bundle.argument_name_convertor'] ?? self::getFrameworkExtraBundle_ArgumentNameConvertorService($container)), new \Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage(), ($container->privates['security.authentication.trust_resolver'] ??= new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver()), ($container->privates['security.role_hierarchy'] ??= new \Symfony\Component\Security\Core\Role\RoleHierarchy([])), ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), ($container->privates['security.authorization_checker'] ?? self::getSecurity_AuthorizationCheckerService($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)));
    }

    /*
     * Gets the private 'sensio_framework_extra.view.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener
     */
    protected static function getSensioFrameworkExtra_View_ListenerService($container)
    {
        $container->privates['sensio_framework_extra.view.listener'] = $instance = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener(new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser(($container->services['kernel'] ?? $container->get('kernel', 1))));

        $instance->setContainer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'twig' => ['privates', 'twig', 'getTwigService', false],
        ], [
            'twig' => 'Twig\\Environment',
        ]))->withContext('sensio_framework_extra.view.listener', $container));

        return $instance;
    }

    /*
     * Gets the private 'serializer' shared service.
     *
     * @return \Symfony\Component\Serializer\Serializer
     */
    protected static function getSerializerService($container)
    {
        $a = ($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container));
        $b = ($container->services['translator'] ?? self::getTranslatorService($container));
        $c = ($container->privates['serializer.mapping.cache_class_metadata_factory'] ?? self::getSerializer_Mapping_CacheClassMetadataFactoryService($container));

        $d = new \Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter($c);
        $e = ($container->privates['property_info.cache'] ?? self::getPropertyInfo_CacheService($container));
        $f = new \Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata($c);

        return $container->privates['serializer'] = new \Symfony\Component\Serializer\Serializer([new \Symfony\Component\Serializer\Normalizer\UnwrappingDenormalizer($a), new \Symfony\Component\Serializer\Normalizer\ProblemNormalizer(false, translator: $b), new \Symfony\Component\Serializer\Normalizer\UidNormalizer(), new \Symfony\Component\Serializer\Normalizer\TranslatableNormalizer($b), new \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer(), new \Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer([], $d), new \Symfony\Component\Serializer\Normalizer\MimeMessageNormalizer(new \Symfony\Component\Serializer\Normalizer\PropertyNormalizer($c, $d, $e, $f, NULL)), new \Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer(), new \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer(), new \Symfony\Component\Serializer\Normalizer\FormErrorNormalizer(), new \Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer(), new \Symfony\Component\Serializer\Normalizer\DataUriNormalizer(($container->privates['mime_types'] ?? self::getMimeTypesService($container))), new \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer(NULL, NULL), new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new \Symfony\Component\Serializer\Normalizer\ObjectNormalizer($c, $d, $a, $e, $f, NULL)], [new \Symfony\Component\Serializer\Encoder\XmlEncoder(), new \Symfony\Component\Serializer\Encoder\JsonEncoder(NULL, NULL), new \Symfony\Component\Serializer\Encoder\YamlEncoder(NULL, NULL), new \Symfony\Component\Serializer\Encoder\CsvEncoder()]);
    }

    /*
     * Gets the private 'serializer.mapping.cache_class_metadata_factory' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\Factory\CacheClassMetadataFactory
     */
    protected static function getSerializer_Mapping_CacheClassMetadataFactoryService($container)
    {
        return $container->privates['serializer.mapping.cache_class_metadata_factory'] = new \Symfony\Component\Serializer\Mapping\Factory\CacheClassMetadataFactory(new \Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory(new \Symfony\Component\Serializer\Mapping\Loader\LoaderChain([new \Symfony\Component\Serializer\Mapping\Loader\AttributeLoader(($container->privates['annotations.cached_reader'] ?? $container->load('getAnnotations_CachedReaderService')))])), \Symfony\Component\Cache\Adapter\PhpArrayAdapter::create(($container->targetDir.''.'/serialization.php'), ($container->privates['cache.serializer'] ?? self::getCache_SerializerService($container))));
    }

    /*
     * Gets the private 'session_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SessionListener
     */
    protected static function getSessionListenerService($container)
    {
        return $container->privates['session_listener'] = new \Symfony\Component\HttpKernel\EventListener\SessionListener(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'logger' => ['privates', 'monolog.logger', 'getMonolog_LoggerService', false],
            'session_factory' => ['privates', 'session.factory', 'getSession_FactoryService', true],
        ], [
            'logger' => '?',
            'session_factory' => '?',
        ]), false, $container->getParameter('session.storage.options'));
    }

    /*
     * Gets the private 'state_machine.order' shared service.
     *
     * @return \Symfony\Component\Workflow\StateMachine
     */
    protected static function getStateMachine_OrderService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['state_machine.order'])) {
            return $container->privates['state_machine.order'];
        }

        return $container->privates['state_machine.order'] = new \Symfony\Component\Workflow\StateMachine(new \Symfony\Component\Workflow\Definition(['1', '3', '4', '5', '6', '7', '8', '9'], [new \Symfony\Component\Workflow\Transition('pay', '1', '6'), new \Symfony\Component\Workflow\Transition('packing', '1', '4'), new \Symfony\Component\Workflow\Transition('packing', '6', '4'), new \Symfony\Component\Workflow\Transition('cancel', '1', '3'), new \Symfony\Component\Workflow\Transition('cancel', '4', '3'), new \Symfony\Component\Workflow\Transition('cancel', '6', '3'), new \Symfony\Component\Workflow\Transition('back_to_in_progress', '3', '4'), new \Symfony\Component\Workflow\Transition('ship', '1', '5'), new \Symfony\Component\Workflow\Transition('ship', '6', '5'), new \Symfony\Component\Workflow\Transition('ship', '4', '5'), new \Symfony\Component\Workflow\Transition('return', '5', '9'), new \Symfony\Component\Workflow\Transition('cancel_return', '9', '5')], ['1'], new \Symfony\Component\Workflow\Metadata\InMemoryMetadataStore([], [], new \SplObjectStorage())), new \Symfony\Component\Workflow\MarkingStore\MethodMarkingStore(true, 'marking'), $a, 'order', NULL);
    }

    /*
     * Gets the private 'translation.locale_switcher' shared service.
     *
     * @return \Symfony\Component\Translation\LocaleSwitcher
     */
    protected static function getTranslation_LocaleSwitcherService($container)
    {
        return $container->privates['translation.locale_switcher'] = new \Symfony\Component\Translation\LocaleSwitcher($container->getEnv('ECCUBE_LOCALE'), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['slugger'] ??= new \Symfony\Component\String\Slugger\AsciiSlugger($container->getEnv('ECCUBE_LOCALE')));
            yield 1 => ($container->services['translator'] ?? self::getTranslatorService($container));
        }, 2), ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)));
    }

    /*
     * Gets the private 'twig' shared service.
     *
     * @return \Twig\Environment
     */
    protected static function getTwigService($container)
    {
        $a = new \Twig\Loader\FilesystemLoader([], \dirname(__DIR__, 4));
        $a->addPath((\dirname(__DIR__, 4).'/app/template/'.$container->getEnv('string:ECCUBE_TEMPLATE_CODE')));
        $a->addPath((\dirname(__DIR__, 4).'/src/Eccube/Resource/template/default'));
        $a->addPath((\dirname(__DIR__, 4).'/app/Plugin'));
        $a->addPath((\dirname(__DIR__, 4).'/app/template/admin'), 'admin');
        $a->addPath((\dirname(__DIR__, 4).'/src/Eccube/Resource/template/admin'), 'admin');
        $a->addPath((\dirname(__DIR__, 4).'/app/template/user_data'), 'user_data');
        $a->addPath((\dirname(__DIR__, 4).'/src/Eccube/Resource/template/toolbar'), 'toolbar');
        $a->addPath((\dirname(__DIR__, 4).'/src/Eccube/Resource/template/common'), 'common');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Resources/views'), 'Security');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Resources/views'), '!Security');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/Resources/views'), 'Doctrine');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/Resources/views'), '!Doctrine');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/templates'), 'KnpPaginator');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle/templates'), '!KnpPaginator');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-migrations-bundle/Resources/views'), 'DoctrineMigrations');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-migrations-bundle/Resources/views'), '!DoctrineMigrations');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Resources/views/Email'), 'email');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Resources/views/Email'), '!email');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Resources/views/Form'));

        $container->privates['twig'] = $instance = new \Twig\Environment($a, ['debug' => false, 'strict_variables' => false, 'autoescape' => 'name', 'cache' => ($container->targetDir.''.'/twig'), 'charset' => 'UTF-8']);

        $b = ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack());
        $c = ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container));
        $d = ($container->services['translator'] ?? self::getTranslatorService($container));
        $e = ($container->services['router'] ?? self::getRouterService($container));
        $f = new \Symfony\Component\Workflow\Registry();
        $f->addWorkflow(($container->privates['state_machine.order'] ?? self::getStateMachine_OrderService($container)), new \Symfony\Component\Workflow\SupportStrategy\InstanceOfSupportStrategy('Eccube\\Service\\OrderStateMachineContext'));
        $g = new \Symfony\Bridge\Twig\AppVariable();
        $g->setEnvironment('prod');
        $g->setDebug(false);
        $g->setTokenStorage($c);
        if ($container->has('request_stack')) {
            $g->setRequestStack($b);
        }
        $g->setLocaleSwitcher(($container->privates['translation.locale_switcher'] ?? self::getTranslation_LocaleSwitcherService($container)));
        $g->setEnabledLocales([]);

        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CsrfExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\LogoutUrlExtension(($container->privates['security.logout_url_generator'] ?? self::getSecurity_LogoutUrlGeneratorService($container))));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SecurityExtension(($container->privates['security.authorization_checker'] ?? self::getSecurity_AuthorizationCheckerService($container)), new \Symfony\Component\Security\Http\Impersonate\ImpersonateUrlGenerator($b, ($container->privates['security.firewall.map'] ?? self::getSecurity_Firewall_MapService($container)), $c)));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension($d));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\AssetExtension(new \Symfony\Component\Asset\Packages(new \Symfony\Component\Asset\PathPackage('/html/template/'.$container->getEnv('string:ECCUBE_TEMPLATE_CODE'), ($container->privates['assets.empty_version_strategy'] ??= new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy()), ($container->privates['assets.context'] ?? self::getAssets_ContextService($container))), new RewindableGenerator(function () use ($container) {
            yield 'admin' => ($container->privates['assets._package_admin'] ?? $container->load('getAssets_PackageAdminService'));
            yield 'save_image' => ($container->privates['assets._package_save_image'] ?? $container->load('getAssets_PackageSaveImageService'));
            yield 'plugin' => ($container->privates['assets._package_plugin'] ?? $container->load('getAssets_PackagePluginService'));
            yield 'install' => ($container->privates['assets._package_install'] ?? $container->load('getAssets_PackageInstallService'));
            yield 'temp_image' => ($container->privates['assets._package_temp_image'] ?? $container->load('getAssets_PackageTempImageService'));
            yield 'user_data' => ($container->privates['assets._package_user_data'] ?? $container->load('getAssets_PackageUserDataService'));
            yield 'bundle' => ($container->privates['assets._package_bundle'] ?? $container->load('getAssets_PackageBundleService'));
        }, 7))));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension(($container->privates['debug.file_link_formatter'] ??= new \Symfony\Component\ErrorHandler\ErrorRenderer\FileLinkFormatter(NULL)), \dirname(__DIR__, 4), 'UTF-8'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension($e));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension(($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)), false));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ExpressionExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension(new \Symfony\Component\HttpFoundation\UrlHelper($b, $e)));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\WorkflowExtension($f));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SerializerExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\FormExtension($d));
        $instance->addExtension(new \Eccube\Twig\Extension\CartServiceExtension(($container->privates['Eccube\\Service\\CartService'] ?? self::getCartServiceService($container))));
        $instance->addExtension(new \Eccube\Twig\Extension\CsrfExtension(($container->privates['security.csrf.token_manager'] ?? self::getSecurity_Csrf_TokenManagerService($container))));
        $instance->addExtension(new \Eccube\Twig\Extension\EccubeBlockExtension($instance, []));
        $instance->addExtension(($container->privates['Eccube\\Twig\\Extension\\EccubeExtension'] ?? self::getEccubeExtensionService($container)));
        $instance->addExtension(new \Eccube\Twig\Extension\IgnoreTwigSandboxErrorExtension());
        $instance->addExtension(new \Eccube\Twig\Extension\IntlExtension());
        $instance->addExtension(new \Eccube\Twig\Extension\RepositoryExtension(($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container))));
        $instance->addExtension(new \Eccube\Twig\Extension\SafeTextmailEscaperExtension($instance));
        $instance->addExtension(($container->privates['Eccube\\Twig\\Extension\\TaxExtension'] ?? self::getTaxExtensionService($container)));
        $instance->addExtension(new \Eccube\Twig\Extension\TemplateEventExtension());
        $instance->addExtension(new \Eccube\Twig\Extension\TwigIncludeExtension($instance));
        $instance->addExtension(new \Twig\Extension\StringLoaderExtension());
        $instance->addExtension(new \Twig\Extension\SandboxExtension(new \Eccube\Twig\Sandbox\SecurityPolicyDecorator(new \Twig\Sandbox\SecurityPolicy($container->parameters['eccube.twig_sandbox.allowed_tags'], $container->parameters['eccube.twig_sandbox.allowed_filters'], $container->parameters['eccube.twig_sandbox.allowed_methods'], [], $container->parameters['eccube.twig_sandbox.allowed_functions'])), false));
        $instance->addExtension(new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
        $instance->addExtension(new \Knp\Bundle\PaginatorBundle\Twig\Extension\PaginationExtension(new \Knp\Bundle\PaginatorBundle\Helper\Processor($e, $d)));
        $instance->addExtension(new \Exercise\HTMLPurifierBundle\Twig\HTMLPurifierExtension());
        $instance->addExtension(new \Twig\Extra\Intl\IntlExtension());
        $instance->addGlobal('app', $g);
        $instance->addRuntimeLoader(new \Twig\RuntimeLoader\ContainerRuntimeLoader(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Symfony\\Bridge\\Twig\\Extension\\CsrfRuntime' => ['privates', 'twig.runtime.security_csrf', 'getTwig_Runtime_SecurityCsrfService', true],
            'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => ['privates', 'twig.runtime.httpkernel', 'getTwig_Runtime_HttpkernelService', true],
            'Symfony\\Bridge\\Twig\\Extension\\SerializerRuntime' => ['privates', 'twig.runtime.serializer', 'getTwig_Runtime_SerializerService', true],
            'Symfony\\Component\\Form\\FormRenderer' => ['privates', 'twig.form.renderer', 'getTwig_Form_RendererService', true],
            'Exercise\\HTMLPurifierBundle\\Twig\\HTMLPurifierRuntime' => ['privates', 'exercise_html_purifier.twig.runtime', 'getExerciseHtmlPurifier_Twig_RuntimeService', true],
        ], [
            'Symfony\\Bridge\\Twig\\Extension\\CsrfRuntime' => '?',
            'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => '?',
            'Symfony\\Bridge\\Twig\\Extension\\SerializerRuntime' => '?',
            'Symfony\\Component\\Form\\FormRenderer' => '?',
            'Exercise\\HTMLPurifierBundle\\Twig\\HTMLPurifierRuntime' => '?',
        ])));
        $instance->addGlobal('BaseInfo', NULL);
        $instance->addGlobal('eccube_config', ($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container)));
        $instance->addGlobal('event_dispatcher', ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));
        $instance->addExtension(new \Eccube\Twig\Extension\IgnoreRoutingNotFoundExtension($e));
        (new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', $container->getEnv('ECCUBE_TIMEZONE'), 0, '.', ','))->configure($instance);

        return $instance;
    }

    /*
     * Gets the private 'validator' shared service.
     *
     * @return \Symfony\Component\Validator\Validator\ValidatorInterface
     */
    protected static function getValidatorService($container)
    {
        $a = ($container->privates['validator.builder'] ?? self::getValidator_BuilderService($container));

        if (isset($container->privates['validator'])) {
            return $container->privates['validator'];
        }

        return $container->privates['validator'] = $a->getValidator();
    }

    /*
     * Gets the private 'validator.builder' shared service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilder
     */
    protected static function getValidator_BuilderService($container)
    {
        $container->privates['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $a = ($container->privates['property_info.cache'] ?? self::getPropertyInfo_CacheService($container));

        $instance->setConstraintValidatorFactory(new \Symfony\Component\Validator\ContainerConstraintValidatorFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Eccube\\Form\\Validator\\EmailValidator' => ['privates', 'Eccube\\Form\\Validator\\EmailValidator', 'getEmailValidatorService', true],
            'Eccube\\Form\\Validator\\TwigLintValidator' => ['privates', 'Eccube\\Form\\Validator\\TwigLintValidator', 'getTwigLintValidatorService', true],
            'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => ['privates', 'doctrine.orm.validator.unique', 'getDoctrine_Orm_Validator_UniqueService', true],
            'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => ['privates', 'security.validator.user_password', 'getSecurity_Validator_UserPasswordService', true],
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => ['privates', 'validator.email', 'getValidator_EmailService', true],
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => ['privates', 'validator.expression', 'getValidator_ExpressionService', true],
            'Symfony\\Component\\Validator\\Constraints\\NoSuspiciousCharactersValidator' => ['privates', 'validator.no_suspicious_characters', 'getValidator_NoSuspiciousCharactersService', true],
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => ['privates', 'validator.not_compromised_password', 'getValidator_NotCompromisedPasswordService', true],
            'Symfony\\Component\\Validator\\Constraints\\WhenValidator' => ['privates', 'validator.when', 'getValidator_WhenService', true],
            'doctrine.orm.validator.unique' => ['privates', 'doctrine.orm.validator.unique', 'getDoctrine_Orm_Validator_UniqueService', true],
            'security.validator.user_password' => ['privates', 'security.validator.user_password', 'getSecurity_Validator_UserPasswordService', true],
            'validator.expression' => ['privates', 'validator.expression', 'getValidator_ExpressionService', true],
        ], [
            'Eccube\\Form\\Validator\\EmailValidator' => '?',
            'Eccube\\Form\\Validator\\TwigLintValidator' => '?',
            'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => '?',
            'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\NoSuspiciousCharactersValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\WhenValidator' => '?',
            'doctrine.orm.validator.unique' => '?',
            'security.validator.user_password' => '?',
            'validator.expression' => '?',
        ])));
        $instance->setGroupProviderLocator(($container->privates['.service_locator.Xbsa8iG'] ??= new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [], [])));
        if ($container->has('translator')) {
            $instance->setTranslator(($container->services['translator'] ?? self::getTranslatorService($container)));
        }
        $instance->setTranslationDomain('validators');
        $instance->addXmlMappings([(\dirname(__DIR__, 4).'/vendor/symfony/form/Resources/config/validation.xml')]);
        $instance->enableAttributeMapping(true);
        $instance->setDoctrineAnnotationReader(($container->privates['annotations.cached_reader'] ?? $container->load('getAnnotations_CachedReaderService')));
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->setMappingCache(\Symfony\Component\Cache\Adapter\PhpArrayAdapter::create(($container->targetDir.''.'/validation.php'), ($container->privates['cache.validator'] ?? self::getCache_ValidatorService($container))));
        $instance->addObjectInitializers([new \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer(($container->services['doctrine'] ?? self::getDoctrineService($container)))]);
        $instance->addLoader(new \Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader($a, $a, $a, NULL));
        $instance->addLoader(new \Symfony\Bridge\Doctrine\Validator\DoctrineLoader(($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container)), NULL));

        return $instance;
    }

    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
    {
        if (isset($this->buildParameters[$name])) {
            return $this->buildParameters[$name];
        }

        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new ParameterNotFoundException($name);
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        if (isset($this->buildParameters[$name])) {
            return true;
        }

        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (!isset($this->parameterBag)) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            foreach ($this->buildParameters as $name => $value) {
                $parameters[$name] = $value;
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [
        'kernel.runtime_environment' => false,
        'kernel.runtime_mode' => false,
        'kernel.runtime_mode.web' => false,
        'kernel.runtime_mode.cli' => false,
        'kernel.runtime_mode.worker' => false,
        'kernel.build_dir' => false,
        'kernel.cache_dir' => false,
        'locale' => false,
        'timezone' => false,
        'currency' => false,
        'eccube_database_url' => false,
        'eccube_mailer_dsn' => false,
        'eccube_admin_route' => false,
        'eccube_user_data_route' => false,
        'eccube_front_allow_hosts' => false,
        'eccube_front_deny_hosts' => false,
        'eccube_admin_allow_hosts' => false,
        'eccube_admin_deny_hosts' => false,
        'eccube_force_ssl' => false,
        'eccube_phpinfo_enabled' => false,
        'eccube.theme' => false,
        'eccube_theme_code' => false,
        'eccube_auth_magic' => false,
        'eccube_theme_front_dir' => false,
        'eccube_html_front_dir' => false,
        'eccube_csv_temp_realdir' => false,
        'eccube_owners_store_url' => false,
        'eccube_package_api_url' => false,
        'eccube_content_maintenance_file_path' => false,
        'eccube_2fa_enabled' => false,
        'eccube_2fa_cookie_name' => false,
        'eccube_2fa_expire' => false,
        'eccube_restrict_file_upload' => false,
        'kernel.secret' => false,
        'kernel.default_locale' => false,
        'router.cache_dir' => false,
        'serializer.mapping.cache.file' => false,
        'session.storage.options' => false,
        'validator.mapping.cache.file' => false,
        'doctrine.orm.proxy_dir' => false,
    ];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        $container = $this;
        $value = match ($name) {
            'kernel.runtime_environment' => $container->getEnv('default:kernel.environment:APP_RUNTIME_ENV'),
            'kernel.runtime_mode' => $container->getEnv('query_string:default:container.runtime_mode:APP_RUNTIME_MODE'),
            'kernel.runtime_mode.web' => $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'),
            'kernel.runtime_mode.cli' => $container->getEnv('not:default:kernel.runtime_mode.web:'),
            'kernel.runtime_mode.worker' => $container->getEnv('bool:default::key:worker:default:kernel.runtime_mode:'),
            'kernel.build_dir' => $container->targetDir.'',
            'kernel.cache_dir' => $container->targetDir.'',
            'locale' => $container->getEnv('ECCUBE_LOCALE'),
            'timezone' => $container->getEnv('ECCUBE_TIMEZONE'),
            'currency' => $container->getEnv('ECCUBE_CURRENCY'),
            'eccube_database_url' => $container->getEnv('DATABASE_URL'),
            'eccube_mailer_dsn' => $container->getEnv('MAILER_DSN'),
            'eccube_admin_route' => $container->getEnv('ECCUBE_ADMIN_ROUTE'),
            'eccube_user_data_route' => $container->getEnv('ECCUBE_USER_DATA_ROUTE'),
            'eccube_front_allow_hosts' => $container->getEnv('json:ECCUBE_FRONT_ALLOW_HOSTS'),
            'eccube_front_deny_hosts' => $container->getEnv('json:ECCUBE_FRONT_DENY_HOSTS'),
            'eccube_admin_allow_hosts' => $container->getEnv('json:ECCUBE_ADMIN_ALLOW_HOSTS'),
            'eccube_admin_deny_hosts' => $container->getEnv('json:ECCUBE_ADMIN_DENY_HOSTS'),
            'eccube_force_ssl' => $container->getEnv('bool:ECCUBE_FORCE_SSL'),
            'eccube_phpinfo_enabled' => $container->getEnv('bool:ECCUBE_PHPINFO_ENABLED'),
            'eccube.theme' => $container->getEnv('ECCUBE_TEMPLATE_CODE'),
            'eccube_theme_code' => $container->getEnv('ECCUBE_TEMPLATE_CODE'),
            'eccube_auth_magic' => $container->getEnv('ECCUBE_AUTH_MAGIC'),
            'eccube_theme_front_dir' => (\dirname(__DIR__, 4).'/app/template/'.$container->getEnv('string:ECCUBE_TEMPLATE_CODE')),
            'eccube_html_front_dir' => (\dirname(__DIR__, 4).'/html/template/'.$container->getEnv('string:ECCUBE_TEMPLATE_CODE')),
            'eccube_csv_temp_realdir' => ($container->targetDir.''.'/prod/eccube'),
            'eccube_owners_store_url' => $container->getEnv('ECCUBE_OWNERS_STORE_URL'),
            'eccube_package_api_url' => $container->getEnv('ECCUBE_PACKAGE_API_URL'),
            'eccube_content_maintenance_file_path' => $container->getEnv('ECCUBE_MAINTENANCE_FILE_PATH'),
            'eccube_2fa_enabled' => $container->getEnv('ECCUBE_2FA_ENABLED'),
            'eccube_2fa_cookie_name' => $container->getEnv('ECCUBE_2FA_COOKIE_NAME'),
            'eccube_2fa_expire' => $container->getEnv('ECCUBE_2FA_EXPIRE'),
            'eccube_restrict_file_upload' => $container->getEnv('ECCUBE_RESTRICT_FILE_UPLOAD'),
            'kernel.secret' => $container->getEnv('ECCUBE_AUTH_MAGIC'),
            'kernel.default_locale' => $container->getEnv('ECCUBE_LOCALE'),
            'router.cache_dir' => $container->targetDir.'',
            'serializer.mapping.cache.file' => ($container->targetDir.''.'/serialization.php'),
            'session.storage.options' => [
                'cache_limiter' => '0',
                'name' => $container->getEnv('ECCUBE_COOKIE_NAME'),
                'cookie_lifetime' => $container->getEnv('ECCUBE_COOKIE_LIFETIME'),
                'cookie_httponly' => true,
                'gc_maxlifetime' => $container->getEnv('ECCUBE_GC_MAXLIFETIME'),
                'gc_probability' => 1,
            ],
            'validator.mapping.cache.file' => ($container->targetDir.''.'/validation.php'),
            'doctrine.orm.proxy_dir' => ($container->targetDir.''.'/doctrine/orm/Proxies'),
            default => throw new ParameterNotFoundException($name),
        };
        $this->loadedDynamicParameters[$name] = true;

        return $this->dynamicParameters[$name] = $value;
    }

    protected function getDefaultParameters(): array
    {
        return [
            'kernel.project_dir' => \dirname(__DIR__, 4),
            'kernel.environment' => 'prod',
            'kernel.debug' => false,
            'kernel.logs_dir' => (\dirname(__DIR__, 3).'/log'),
            'kernel.bundles' => [
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle',
                'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'KnpPaginatorBundle' => 'Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle',
                'ExerciseHTMLPurifierBundle' => 'Exercise\\HTMLPurifierBundle\\ExerciseHTMLPurifierBundle',
                'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle',
                'TwigExtraBundle' => 'Twig\\Extra\\TwigExtraBundle\\TwigExtraBundle',
                'EccubeBundle' => 'Eccube\\EccubeBundle',
            ],
            'kernel.bundles_metadata' => [
                'FrameworkBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle'),
                    'namespace' => 'Symfony\\Bundle\\FrameworkBundle',
                ],
                'SecurityBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/security-bundle'),
                    'namespace' => 'Symfony\\Bundle\\SecurityBundle',
                ],
                'DoctrineBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\DoctrineBundle',
                ],
                'DoctrineFixturesBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-fixtures-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\FixturesBundle',
                ],
                'SensioFrameworkExtraBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src'),
                    'namespace' => 'Sensio\\Bundle\\FrameworkExtraBundle',
                ],
                'MonologBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/monolog-bundle'),
                    'namespace' => 'Symfony\\Bundle\\MonologBundle',
                ],
                'TwigBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/twig-bundle'),
                    'namespace' => 'Symfony\\Bundle\\TwigBundle',
                ],
                'KnpPaginatorBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/knplabs/knp-paginator-bundle'),
                    'namespace' => 'Knp\\Bundle\\PaginatorBundle',
                ],
                'ExerciseHTMLPurifierBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/exercise/htmlpurifier-bundle/src'),
                    'namespace' => 'Exercise\\HTMLPurifierBundle',
                ],
                'DoctrineMigrationsBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-migrations-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\MigrationsBundle',
                ],
                'TwigExtraBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/twig/extra-bundle'),
                    'namespace' => 'Twig\\Extra\\TwigExtraBundle',
                ],
                'EccubeBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/src/Eccube'),
                    'namespace' => 'Eccube',
                ],
            ],
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'Eccube_KernelProdContainer',
            'container.dumper.inline_class_loader' => true,
            'env(ECCUBE_LOCALE)' => 'ja',
            'env(ECCUBE_TIMEZONE)' => 'Asia/Tokyo',
            'env(ECCUBE_CURRENCY)' => 'JPY',
            'env(DATABASE_URL)' => '',
            'env(DATABASE_SERVER_VERSION)' => NULL,
            'env(DATABASE_CHARSET)' => 'utf8',
            'env(ECCUBE_ADMIN_ROUTE)' => 'admin',
            'env(ECCUBE_USER_DATA_ROUTE)' => 'user_data',
            'env(ECCUBE_FRONT_ALLOW_HOSTS)' => '[]',
            'env(ECCUBE_FRONT_DENY_HOSTS)' => '[]',
            'env(ECCUBE_ADMIN_ALLOW_HOSTS)' => '[]',
            'env(ECCUBE_ADMIN_DENY_HOSTS)' => '[]',
            'env(ECCUBE_FORCE_SSL)' => '0',
            'env(ECCUBE_PHPINFO_ENABLED)' => '0',
            'env(ECCUBE_TEMPLATE_CODE)' => 'default',
            'env(ECCUBE_AUTH_MAGIC)' => '<change.me>',
            'env(ECCUBE_COOKIE_NAME)' => 'eccube',
            'env(ECCUBE_COOKIE_PATH)' => '/',
            'env(ECCUBE_COOKIE_LIFETIME)' => '0',
            'env(ECCUBE_GC_MAXLIFETIME)' => '1440',
            'env(ECCUBE_PACKAGE_API_URL)' => 'https://package-api-c2.ec-cube.net/v43',
            'env(ECCUBE_OWNERS_STORE_URL)' => 'https://www.ec-cube.net',
            'env(ECCUBE_MAINTENANCE_FILE_PATH)' => (\dirname(__DIR__, 4).'/.maintenance'),
            'env(ECCUBE_2FA_ENABLED)' => '1',
            'env(ECCUBE_2FA_COOKIE_NAME)' => 'eccube_2fa',
            'env(ECCUBE_2FA_EXPIRE)' => '14',
            'env(ECCUBE_RESTRICT_FILE_UPLOAD)' => '0',
            'eccube_auth_type' => 'HMAC',
            'eccube_password_hash_algos' => 'SHA256',
            'eccube_theme_app_dir' => (\dirname(__DIR__, 4).'/app/template'),
            'eccube_theme_src_dir' => (\dirname(__DIR__, 4).'/src/Eccube/Resource/template'),
            'eccube_theme_user_data_dir' => (\dirname(__DIR__, 4).'/app/template/user_data'),
            'eccube_theme_front_default_dir' => (\dirname(__DIR__, 4).'/src/Eccube/Resource/template/default'),
            'eccube_theme_admin_dir' => (\dirname(__DIR__, 4).'/app/template/admin'),
            'eccube_theme_admin_default_dir' => (\dirname(__DIR__, 4).'/src/Eccube/Resource/template/admin'),
            'eccube_html_dir' => (\dirname(__DIR__, 4).'/html'),
            'eccube_html_plugin_dir' => (\dirname(__DIR__, 4).'/html/plugin'),
            'eccube_html_admin_dir' => (\dirname(__DIR__, 4).'/html/template/admin'),
            'eccube_twig_block_templates' => [

            ],
            'eccube_save_image_dir' => (\dirname(__DIR__, 4).'/html/upload/save_image'),
            'eccube_temp_image_dir' => (\dirname(__DIR__, 4).'/html/upload/temp_image'),
            'eccube_csv_size' => 5,
            'eccube_csv_split_lines' => 100,
            'eccube_default_password' => 'abc********123',
            'eccube_deliv_addr_max' => 20,
            'eccube_deliv_date_end_max' => 21,
            'eccube_id_max_len' => 50,
            'eccube_id_min_len' => 4,
            'eccube_int_len' => 9,
            'eccube_category_nest_level' => 5,
            'eccube_lltext_len' => 99999,
            'eccube_ltext_len' => 3000,
            'eccube_max_total_fee' => 9999999999,
            'eccube_mltext_len' => 1000,
            'eccube_mtext_len' => 200,
            'plugin_html_realdir' => (\dirname(__DIR__, 4).'/html/plugin/'),
            'plugin_html_urlpath' => '/plugin/',
            'plugin_realdir' => (\dirname(__DIR__, 4).'/app/Plugin'),
            'plugin_data_realdir' => (\dirname(__DIR__, 4).'/app/PluginData'),
            'plugin_temp_realdir' => '/PATH/TO/WEB_ROOT/src/Eccube/Repository/Master/upload/temp_plugin/',
            'eccube_price_len' => 8,
            'eccube_search_pmax' => 12,
            'eccube_sitemap_products_per_page' => 1000,
            'eccube_stext_len' => 255,
            'eccube_sltext_len' => 500,
            'eccube_smtext_len' => 100,
            'eccube_tax_rule_priority' => [
                0 => 'product_id',
                1 => 'product_class_id',
                2 => 'pref_id',
                3 => 'country_id',
            ],
            'eccube_url_len' => 1024,
            'eccube_default_page_count' => 50,
            'eccube_admin_product_stock_status' => 3,
            'eccube_customer_reset_expire' => 10,
            'eccube_csv_export_separator' => ',',
            'eccube_csv_export_encoding' => 'SJIS-win',
            'eccube_csv_import_encoding' => [
                0 => 'UTF-8',
                1 => 'SJIS-win',
                2 => 'SJIS',
                3 => 'EUC-JP',
                4 => 'ASCII',
                5 => 'JIS',
            ],
            'eccube_csv_export_date_format' => 'Y-m-d H:i:s',
            'eccube_csv_export_multidata_separator' => ',',
            'eccube_csv_import_delimiter' => ',',
            'eccube_csv_import_enclosure' => '"',
            'eccube_csv_import_escape' => '\\',
            'eccube_info_url' => 'https://www.ec-cube.net/info/4/',
            'eccube_official_site_url' => 'https://www.ec-cube.net',
            'eccube_community_site_url' => 'https://xoops.ec-cube.net',
            'eccube_document_url' => 'http://doc4.ec-cube.net',
            'eccube_manual_url' => 'https://www.ec-cube.net/manual/ec-cube4/',
            'eccube_name_len' => 16,
            'eccube_kana_len' => 25,
            'eccube_address1_len' => 32,
            'eccube_address2_len' => 32,
            'eccube_birth_max' => 110,
            'eccube_product_order_price_lower' => 1,
            'eccube_product_order_newer' => 2,
            'eccube_product_order_price_higher' => 3,
            'eccube_price_max' => 2147483647,
            'eccube_tel_len_max' => 14,
            'eccube_postal_code' => 8,
            'eccube_password_min_len' => 12,
            'eccube_password_max_len' => 50,
            'eccube_password_pattern' => '/\\A(?=.*?[a-z])(?=.*?\\d)[!-~]+\\z/i',
            'eccube_composer_memory_limit' => '1536M',
            'eccube_order_mail_template_id' => 1,
            'eccube_entry_confirm_mail_template_id' => 2,
            'eccube_entry_complete_mail_template_id' => 3,
            'eccube_customer_withdraw_mail_template_id' => 4,
            'eccube_contact_mail_template_id' => 5,
            'eccube_forgot_mail_template_id' => 6,
            'eccube_reset_complete_mail_template_id' => 7,
            'eccube_shipping_notify_mail_template_id' => 8,
            'eccube_rfc_email_check' => false,
            'eccube_email_len' => 254,
            'eccube_order_no_format' => '',
            'eccube_order_pdf_message_len' => 30,
            'eccube_news_start_year' => 2000,
            'eccube_result_cache_lifetime' => 3600,
            'eccube_result_cache_lifetime_short' => 10,
            'eccube_restrict_file_upload_urls' => [
                0 => 'admin_content_file',
                1 => 'admin_store_plugin_install',
                2 => 'admin_content_page_new',
                3 => 'admin_content_page_edit',
                4 => 'admin_content_block_new',
                5 => 'admin_content_block_edit',
                6 => 'admin_content_css',
                7 => 'admin_content_js',
                8 => 'admin_store_template_install',
            ],
            'eccube_file_uploadable_extensions' => [
                0 => 'jpg',
                1 => 'jpeg',
                2 => 'png',
                3 => 'gif',
                4 => 'webp',
                5 => 'svg',
                6 => 'ico',
                7 => 'html',
                8 => 'htm',
                9 => 'js',
                10 => 'css',
                11 => 'txt',
                12 => 'pdf',
            ],
            'eccube_login_throttling_max_attempts' => 5,
            'eccube_login_throttling_interval' => '30 minutes',
            'eccube_max_number_new_items_get' => 5,
            'eccube_nav' => [
                'product' => [
                    'name' => 'admin.product.product_management',
                    'icon' => 'fa-cube',
                    'children' => [
                        'product_master' => [
                            'name' => 'admin.product.product_list',
                            'url' => 'admin_product',
                        ],
                        'product_edit' => [
                            'name' => 'admin.product.product_registration',
                            'url' => 'admin_product_product_new',
                        ],
                        'class_name' => [
                            'name' => 'admin.product.class_management',
                            'url' => 'admin_product_class_name',
                        ],
                        'class_category' => [
                            'name' => 'admin.product.category_management',
                            'url' => 'admin_product_category',
                        ],
                        'product_tag' => [
                            'name' => 'admin.product.tag_management',
                            'url' => 'admin_product_tag',
                        ],
                        'product_csv_import' => [
                            'name' => 'admin.product.product_csv_upload',
                            'url' => 'admin_product_csv_import',
                        ],
                        'class_name_csv_import' => [
                            'name' => 'admin.product.class_name_csv_upload',
                            'url' => 'admin_product_class_name_csv_import',
                        ],
                        'class_category_csv_import' => [
                            'name' => 'admin.product.class_category_csv_upload',
                            'url' => 'admin_product_class_category_csv_import',
                        ],
                        'category_csv_import' => [
                            'name' => 'admin.product.category_csv_upload',
                            'url' => 'admin_product_category_csv_import',
                        ],
                    ],
                ],
                'order' => [
                    'name' => 'admin.order.order_management',
                    'icon' => 'fa-shopping-cart',
                    'children' => [
                        'order_master' => [
                            'name' => 'admin.order.order_list',
                            'url' => 'admin_order',
                        ],
                        'order_edit' => [
                            'name' => 'admin.order.order_registration',
                            'url' => 'admin_order_new',
                        ],
                        'shipping_csv_import' => [
                            'name' => 'admin.order.shipping_csv_upload',
                            'url' => 'admin_shipping_csv_import',
                        ],
                    ],
                ],
                'customer' => [
                    'name' => 'admin.customer.customer_management',
                    'icon' => 'fa-users',
                    'children' => [
                        'customer_master' => [
                            'name' => 'admin.customer.customer_list',
                            'url' => 'admin_customer',
                        ],
                        'customer_edit' => [
                            'name' => 'admin.customer.customer_registration',
                            'url' => 'admin_customer_new',
                        ],
                    ],
                ],
                'content' => [
                    'name' => 'admin.content.contents_management',
                    'icon' => 'fa-file-text-o',
                    'children' => [
                        'news' => [
                            'name' => 'admin.content.news_management',
                            'url' => 'admin_content_news',
                        ],
                        'file' => [
                            'name' => 'admin.content.file_management',
                            'url' => 'admin_content_file',
                        ],
                        'layout' => [
                            'name' => 'admin.content.layout_management',
                            'url' => 'admin_content_layout',
                        ],
                        'page' => [
                            'name' => 'admin.content.page_management',
                            'url' => 'admin_content_page',
                        ],
                        'css' => [
                            'name' => 'admin.content.css_management',
                            'url' => 'admin_content_css',
                        ],
                        'js' => [
                            'name' => 'admin.content.js_management',
                            'url' => 'admin_content_js',
                        ],
                        'block' => [
                            'name' => 'admin.content.block_management',
                            'url' => 'admin_content_block',
                        ],
                        'cache' => [
                            'name' => 'admin.content.cache_management',
                            'url' => 'admin_content_cache',
                        ],
                        'maintenance' => [
                            'name' => 'admin.content.maintenance_management',
                            'url' => 'admin_content_maintenance',
                        ],
                    ],
                ],
                'setting' => [
                    'name' => 'admin.setting',
                    'icon' => 'fa-cog',
                    'children' => [
                        'shop' => [
                            'name' => 'admin.setting.shop',
                            'children' => [
                                'shop_index' => [
                                    'name' => 'admin.setting.shop.shop_setting',
                                    'url' => 'admin_setting_shop',
                                ],
                                'shop_tradelaw' => [
                                    'name' => 'admin.setting.shop.tradelaw_setting',
                                    'url' => 'admin_setting_shop_tradelaw',
                                ],
                                'shop_agreement' => [
                                    'name' => 'admin.setting.shop.agreement_setting',
                                    'url' => 'admin_content_page_edit',
                                    'param' => [
                                        'id' => 19,
                                        'return' => 'agreement',
                                    ],
                                ],
                                'shop_payment' => [
                                    'name' => 'admin.setting.shop.payment_setting',
                                    'url' => 'admin_setting_shop_payment',
                                ],
                                'shop_delivery' => [
                                    'name' => 'admin.setting.shop.delivery_setting',
                                    'url' => 'admin_setting_shop_delivery',
                                ],
                                'shop_tax' => [
                                    'name' => 'admin.setting.shop.tax_setting',
                                    'url' => 'admin_setting_shop_tax',
                                ],
                                'shop_mail' => [
                                    'name' => 'admin.setting.shop.mail_setting',
                                    'url' => 'admin_setting_shop_mail',
                                ],
                                'shop_csv' => [
                                    'name' => 'admin.setting.shop.csv_setting',
                                    'url' => 'admin_setting_shop_csv',
                                ],
                                'shop_order_status' => [
                                    'name' => 'admin.setting.shop.order_status_setting',
                                    'url' => 'admin_setting_shop_order_status',
                                ],
                                'shop_calendar' => [
                                    'name' => 'admin.setting.shop.calendar_setting',
                                    'url' => 'admin_setting_shop_calendar',
                                ],
                            ],
                        ],
                        'system' => [
                            'name' => 'admin.setting.system',
                            'children' => [
                                'member' => [
                                    'name' => 'admin.setting.system.member_management',
                                    'url' => 'admin_setting_system_member',
                                ],
                                'authority' => [
                                    'name' => 'admin.setting.system.authority_management',
                                    'url' => 'admin_setting_system_authority',
                                ],
                                'security' => [
                                    'name' => 'admin.setting.system.security_management',
                                    'url' => 'admin_setting_system_security',
                                ],
                                'login_history' => [
                                    'name' => 'admin.setting.system.login_history',
                                    'url' => 'admin_setting_system_login_history',
                                ],
                                'log' => [
                                    'name' => 'admin.setting.system.log_display',
                                    'url' => 'admin_setting_system_log',
                                ],
                                'masterdata' => [
                                    'name' => 'admin.setting.system.master_data_management',
                                    'url' => 'admin_setting_system_masterdata',
                                ],
                                'system_index' => [
                                    'name' => 'admin.setting.system.system_info',
                                    'url' => 'admin_setting_system_system',
                                ],
                            ],
                        ],
                    ],
                ],
                'store' => [
                    'name' => 'admin.store',
                    'icon' => 'fa-plug',
                    'children' => [
                        'plugin' => [
                            'name' => 'admin.store.plugin',
                            'children' => [
                                'plugin_owners_search' => [
                                    'name' => 'admin.store.plugin.plugin_owners_install',
                                    'url' => 'admin_store_plugin_owners_search',
                                ],
                                'plugin_list' => [
                                    'name' => 'admin.store.plugin.plugin_list',
                                    'url' => 'admin_store_plugin',
                                ],
                            ],
                        ],
                        'template' => [
                            'name' => 'admin.store.template',
                            'children' => [
                                'template_list' => [
                                    'name' => 'admin.store.template.template_list',
                                    'url' => 'admin_store_template',
                                ],
                                'template_install' => [
                                    'name' => 'admin.store.template.template_install',
                                    'url' => 'admin_store_template_install',
                                ],
                            ],
                        ],
                        'authentication_setting' => [
                            'name' => 'admin.store.setting',
                            'url' => 'admin_store_authentication_setting',
                        ],
                    ],
                ],
            ],
            'env(MAILER_DSN)' => 'null://null',
            'eccube.twig_sandbox.allowed_tags' => [
                0 => 'apply',
                1 => 'block',
                2 => 'deprecated',
                3 => 'embed',
                4 => 'extends',
                5 => 'flush',
                6 => 'for',
                7 => 'if',
                8 => 'set',
                9 => 'spaceless',
                10 => 'verbatim',
                11 => 'with',
                12 => 'form_theme',
                13 => 'stopwatch',
                14 => 'trans',
                15 => 'trans_default_domain',
            ],
            'eccube.twig_sandbox.allowed_filters' => [
                0 => 'abs',
                1 => 'batch',
                2 => 'capitalize',
                3 => 'column',
                4 => 'convert_encoding',
                5 => 'country_name',
                6 => 'currency_name',
                7 => 'currency_symbol',
                8 => 'date',
                9 => 'date_modify',
                10 => 'default',
                11 => 'escape',
                12 => 'first',
                13 => 'format',
                14 => 'format_currency',
                15 => 'format_date',
                16 => 'format_datetime',
                17 => 'format_number',
                18 => 'format_time',
                19 => 'join',
                20 => 'json_encode',
                21 => 'keys',
                22 => 'language_name',
                23 => 'last',
                24 => 'length',
                25 => 'locale_name',
                26 => 'lower',
                27 => 'merge',
                28 => 'nl2br',
                29 => 'number_format',
                30 => 'replace',
                31 => 'reverse',
                32 => 'round',
                33 => 'slice',
                34 => 'spaceless',
                35 => 'split',
                36 => 'striptags',
                37 => 'timezone_name',
                38 => 'title',
                39 => 'trim',
                40 => 'upper',
                41 => 'url_encode',
                42 => 'abbr_class',
                43 => 'abbr_method',
                44 => 'file_link',
                45 => 'file_relative',
                46 => 'format_args',
                47 => 'format_args_as_text',
                48 => 'humanize',
                49 => 'serialize',
                50 => 'trans',
                51 => 'yaml_dump',
                52 => 'yaml_encode',
                53 => 'currency_symbol',
                54 => 'date_day',
                55 => 'date_day_with_weekday',
                56 => 'date_format',
                57 => 'date_min',
                58 => 'date_sec',
                59 => 'doctrine_format_sql',
                60 => 'doctrine_prettify_sql',
                61 => 'doctrine_pretty_query',
                62 => 'doctrine_replace_query_parameters',
                63 => 'e',
                64 => 'ellipsis',
                65 => 'file_ext_icon',
                66 => 'form_encode_currency',
                67 => 'format_*_number',
                68 => 'format_log_message',
                69 => 'no_image_product',
                70 => 'price',
                71 => 'purify',
                72 => 'time_ago',
            ],
            'eccube.twig_sandbox.allowed_functions' => [
                0 => 'cycle',
                1 => 'date',
                2 => 'max',
                3 => 'min',
                4 => 'random',
                5 => 'range',
                6 => 'country_timezones',
                7 => 'absolute_url',
                8 => 'asset',
                9 => 'asset_version',
                10 => 'csrf_token',
                11 => 'form_parent',
                12 => 'fragment_uri',
                13 => 'impersonation_exit_path',
                14 => 'impersonation_exit_url',
                15 => 'is_granted',
                16 => 'logout_path',
                17 => 'logout_url',
                18 => 'path',
                19 => 'relative_path',
                20 => 't',
                21 => 'url',
                22 => 'active_menus',
                23 => 'class_categories_as_json',
                24 => 'country_names',
                25 => 'csrf_token_for_anchor',
                26 => 'currency_names',
                27 => 'currency_symbol',
                28 => 'field_choices',
                29 => 'field_errors',
                30 => 'field_help',
                31 => 'field_label',
                32 => 'field_name',
                33 => 'field_value',
                34 => 'get_all_carts',
                35 => 'get_cart',
                36 => 'get_carts_total_price',
                37 => 'get_carts_total_quantity',
                38 => 'has_errors',
                39 => 'is_reduced_tax_rate',
                40 => 'language_names',
                41 => 'product',
                42 => 'workflow_can',
                43 => 'workflow_has_marked_place',
                44 => 'workflow_marked_places',
                45 => 'workflow_metadata',
                46 => 'workflow_transition',
                47 => 'workflow_transition_blockers',
                48 => 'workflow_transitions',
            ],
            'eccube.twig_sandbox.allowed_methods' => [
                'Symfony\\Bridge\\Twig\\AppVariable' => [
                    0 => 'getrequest',
                ],
                'Symfony\\Component\\HttpFoundation\\Request' => [
                    0 => 'geturi',
                ],
            ],
            'eccube.twig_sandbox.allowed_properties' => [

            ],
            'mail_magazine_dir' => (\dirname(__DIR__, 4).'/app/mail_magazine'),
            'product_review_display_count_min' => 1,
            'product_review_display_count_max' => 30,
            'plugin_recommend.text_area_len' => 4000,
            'related_product.text_area_len' => 4000,
            'related_product.max_item_count' => 6,
            'sales_report_product_maximum_display' => 20,
            'securitychecker42_receiver' => 'https://www.ec-cube.net/info/security/receiver.php',
            'eccube_rate_limiter_configs' => [
                'forgot' => [
                    'forgot' => [
                        'route' => 'forgot',
                        'method' => [
                            0 => 'POST',
                        ],
                        'type' => [
                            0 => 'ip',
                        ],
                        'limit' => 5,
                        'interval' => '30 minutes',
                        'params' => [

                        ],
                    ],
                ],
                'entry' => [
                    'entry' => [
                        'route' => 'entry',
                        'method' => [
                            0 => 'POST',
                        ],
                        'type' => [
                            0 => 'ip',
                        ],
                        'limit' => 25,
                        'interval' => '30 minutes',
                        'params' => [

                        ],
                    ],
                    'entry_complete' => [
                        'route' => 'entry',
                        'method' => [
                            0 => 'POST',
                        ],
                        'params' => [
                            'mode' => 'complete',
                        ],
                        'type' => [
                            0 => 'ip',
                        ],
                        'limit' => 5,
                        'interval' => '30 minutes',
                    ],
                ],
                'mypage_change' => [
                    'mypage_change' => [
                        'route' => 'mypage_change',
                        'method' => [
                            0 => 'POST',
                        ],
                        'type' => [
                            0 => 'user',
                        ],
                        'limit' => 10,
                        'interval' => '30 minutes',
                        'params' => [

                        ],
                    ],
                ],
                'mypage_delivery_new' => [
                    'mypage_delivery_new' => [
                        'route' => 'mypage_delivery_new',
                        'method' => [
                            0 => 'POST',
                        ],
                        'type' => [
                            0 => 'user',
                        ],
                        'limit' => 10,
                        'interval' => '30 minutes',
                        'params' => [

                        ],
                    ],
                ],
                'mypage_delivery_edit' => [
                    'mypage_delivery_edit' => [
                        'route' => 'mypage_delivery_edit',
                        'method' => [
                            0 => 'POST',
                        ],
                        'type' => [
                            0 => 'user',
                        ],
                        'limit' => 10,
                        'interval' => '30 minutes',
                        'params' => [

                        ],
                    ],
                ],
                'mypage_delivery_delete' => [
                    'mypage_delivery_delete' => [
                        'route' => 'mypage_delivery_delete',
                        'method' => [
                            0 => 'DELETE',
                        ],
                        'type' => [
                            0 => 'user',
                        ],
                        'limit' => 10,
                        'interval' => '30 minutes',
                        'params' => [

                        ],
                    ],
                ],
                'shopping_shipping_multiple_edit' => [
                    'shopping_shipping_multiple_edit_customer' => [
                        'route' => 'shopping_shipping_multiple_edit',
                        'method' => [
                            0 => 'POST',
                        ],
                        'type' => [
                            0 => 'user',
                        ],
                        'limit' => 10,
                        'interval' => '30 minutes',
                        'params' => [

                        ],
                    ],
                ],
                'shopping_shipping_edit' => [
                    'shopping_shipping_edit_customer' => [
                        'route' => 'shopping_shipping_edit',
                        'method' => [
                            0 => 'POST',
                        ],
                        'type' => [
                            0 => 'user',
                        ],
                        'limit' => 10,
                        'interval' => '30 minutes',
                        'params' => [

                        ],
                    ],
                ],
                'contact' => [
                    'contact' => [
                        'route' => 'contact',
                        'method' => [
                            0 => 'POST',
                        ],
                        'params' => [
                            'mode' => 'complete',
                        ],
                        'type' => [
                            0 => 'ip',
                        ],
                        'limit' => 5,
                        'interval' => '30 minutes',
                    ],
                ],
                'admin_two_factor_auth' => [
                    'admin_two_factor_auth' => [
                        'route' => 'admin_two_factor_auth',
                        'method' => [
                            0 => 'POST',
                        ],
                        'type' => [
                            0 => 'user',
                        ],
                        'limit' => 5,
                        'interval' => '30 minutes',
                        'params' => [

                        ],
                    ],
                ],
            ],
            'eccube.plugins.enabled' => [

            ],
            'eccube.plugins.disabled' => [
                0 => 'Coupon42',
                1 => 'MailMagazine42',
                2 => 'ProductReview42',
                3 => 'Recommend42',
                4 => 'RelatedProduct42',
                5 => 'SalesReport42',
                6 => 'Securitychecker42',
                7 => 'SiteKit42',
            ],
            'event_dispatcher.event_aliases' => [
                'Symfony\\Component\\Console\\Event\\ConsoleCommandEvent' => 'console.command',
                'Symfony\\Component\\Console\\Event\\ConsoleErrorEvent' => 'console.error',
                'Symfony\\Component\\Console\\Event\\ConsoleSignalEvent' => 'console.signal',
                'Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent' => 'console.terminate',
                'Symfony\\Component\\Form\\Event\\PreSubmitEvent' => 'form.pre_submit',
                'Symfony\\Component\\Form\\Event\\SubmitEvent' => 'form.submit',
                'Symfony\\Component\\Form\\Event\\PostSubmitEvent' => 'form.post_submit',
                'Symfony\\Component\\Form\\Event\\PreSetDataEvent' => 'form.pre_set_data',
                'Symfony\\Component\\Form\\Event\\PostSetDataEvent' => 'form.post_set_data',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent' => 'kernel.controller_arguments',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerEvent' => 'kernel.controller',
                'Symfony\\Component\\HttpKernel\\Event\\ResponseEvent' => 'kernel.response',
                'Symfony\\Component\\HttpKernel\\Event\\FinishRequestEvent' => 'kernel.finish_request',
                'Symfony\\Component\\HttpKernel\\Event\\RequestEvent' => 'kernel.request',
                'Symfony\\Component\\HttpKernel\\Event\\ViewEvent' => 'kernel.view',
                'Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent' => 'kernel.exception',
                'Symfony\\Component\\HttpKernel\\Event\\TerminateEvent' => 'kernel.terminate',
                'Symfony\\Component\\Workflow\\Event\\GuardEvent' => 'workflow.guard',
                'Symfony\\Component\\Workflow\\Event\\LeaveEvent' => 'workflow.leave',
                'Symfony\\Component\\Workflow\\Event\\TransitionEvent' => 'workflow.transition',
                'Symfony\\Component\\Workflow\\Event\\EnterEvent' => 'workflow.enter',
                'Symfony\\Component\\Workflow\\Event\\EnteredEvent' => 'workflow.entered',
                'Symfony\\Component\\Workflow\\Event\\CompletedEvent' => 'workflow.completed',
                'Symfony\\Component\\Workflow\\Event\\AnnounceEvent' => 'workflow.announce',
                'Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent' => 'security.authentication.success',
                'Symfony\\Component\\Security\\Http\\Event\\InteractiveLoginEvent' => 'security.interactive_login',
                'Symfony\\Component\\Security\\Http\\Event\\SwitchUserEvent' => 'security.switch_user',
            ],
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/_fragment',
            'kernel.http_method_override' => true,
            'kernel.trust_x_sendfile_type_header' => false,
            'kernel.trusted_hosts' => [

            ],
            'kernel.enabled_locales' => [

            ],
            'kernel.error_controller' => 'error_controller',
            'debug.file_link_format' => NULL,
            'asset.request_context.base_path' => NULL,
            'asset.request_context.secure' => NULL,
            'translator.logging' => false,
            'translator.default_path' => (\dirname(__DIR__, 4).'/translations'),
            'debug.error_handler.throw_at' => 0,
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.resource' => 'kernel::loadRoutes',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'session.metadata.storage_key' => '_sf2_meta',
            'session.save_path' => (\dirname(__DIR__, 3).'/sessions/prod'),
            'session.metadata.update_threshold' => 0,
            'form.type_extension.csrf.enabled' => true,
            'form.type_extension.csrf.field_name' => '_token',
            'validator.translation_domain' => 'validators',
            'data_collector.templates' => [

            ],
            'security.role_hierarchy.roles' => [

            ],
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.authentication.hide_user_not_found' => true,
            'security.firewalls' => [
                0 => 'dev',
                1 => 'admin',
                2 => 'customer',
            ],
            'security.logout_uris' => [

            ],
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => [
                'default' => 'doctrine.orm.default_entity_manager',
            ],
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => [
                'datetime' => [
                    'class' => 'Eccube\\Doctrine\\DBAL\\Types\\UTCDateTimeType',
                ],
                'datetimetz' => [
                    'class' => 'Eccube\\Doctrine\\DBAL\\Types\\UTCDateTimeTzType',
                ],
            ],
            'doctrine.connections' => [
                'default' => 'doctrine.dbal.default_connection',
            ],
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Doctrine\\ORM\\EntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.metadata.attribute.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AttributeDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.listeners.attach_entity_listeners.class' => 'Doctrine\\ORM\\Tools\\AttachEntityListenersListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.quote_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy',
            'doctrine.orm.quote_strategy.ansi.class' => 'Doctrine\\ORM\\Mapping\\AnsiQuoteStrategy',
            'doctrine.orm.entity_listener_resolver.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ContainerEntityListenerResolver',
            'doctrine.orm.second_level_cache.default_cache_factory.class' => 'Doctrine\\ORM\\Cache\\DefaultCacheFactory',
            'doctrine.orm.second_level_cache.default_region.class' => 'Doctrine\\ORM\\Cache\\Region\\DefaultRegion',
            'doctrine.orm.second_level_cache.filelock_region.class' => 'Doctrine\\ORM\\Cache\\Region\\FileLockRegion',
            'doctrine.orm.second_level_cache.logger_chain.class' => 'Doctrine\\ORM\\Cache\\Logging\\CacheLoggerChain',
            'doctrine.orm.second_level_cache.logger_statistics.class' => 'Doctrine\\ORM\\Cache\\Logging\\StatisticsCacheLogger',
            'doctrine.orm.second_level_cache.cache_configuration.class' => 'Doctrine\\ORM\\Cache\\CacheConfiguration',
            'doctrine.orm.second_level_cache.regions_configuration.class' => 'Doctrine\\ORM\\Cache\\RegionsConfiguration',
            'doctrine.orm.auto_generate_proxy_classes' => false,
            'doctrine.orm.enable_lazy_ghost_objects' => false,
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'monolog.use_microseconds' => true,
            'monolog.swift_mailer.handlers' => [

            ],
            'monolog.handlers_to_channels' => [
                'monolog.handler.console' => [
                    'type' => 'exclusive',
                    'elements' => [
                        0 => 'event',
                        1 => 'doctrine',
                    ],
                ],
                'monolog.handler.admin' => [
                    'type' => 'inclusive',
                    'elements' => [
                        0 => 'admin',
                        1 => 'app',
                        2 => 'php',
                    ],
                ],
                'monolog.handler.front' => [
                    'type' => 'inclusive',
                    'elements' => [
                        0 => 'front',
                        1 => 'app',
                        2 => 'php',
                    ],
                ],
                'monolog.handler.main' => NULL,
                'monolog.handler.e_user_deprecated_filter' => [
                    'type' => 'inclusive',
                    'elements' => [
                        0 => 'php',
                    ],
                ],
            ],
            'twig.form.resources' => [
                0 => 'form_div_layout.html.twig',
                1 => 'bootstrap_5_layout.html.twig',
            ],
            'twig.default_path' => (\dirname(__DIR__, 4).'/templates'),
            'knp_paginator.template.pagination' => '@KnpPaginator/Pagination/sliding.html.twig',
            'knp_paginator.template.filtration' => '@KnpPaginator/Pagination/filtration.html.twig',
            'knp_paginator.template.sortable' => '@KnpPaginator/Pagination/sortable_link.html.twig',
            'knp_paginator.page_range' => 5,
            'knp_paginator.page_limit' => NULL,
            'doctrine.migrations.preferred_em' => NULL,
            'doctrine.migrations.preferred_connection' => NULL,
            'console.command.ids' => [
                0 => 'console.command.public_alias.Eccube\\Command\\UpdateSchemaDoctrineCommand',
            ],
        ];
    }
}
