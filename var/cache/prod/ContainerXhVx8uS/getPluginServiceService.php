<?php

namespace ContainerXhVx8uS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPluginServiceService extends Eccube_KernelProdContainer
{
    /*
     * Gets the public 'Eccube\Service\PluginService' shared autowired service.
     *
     * @return \Eccube\Service\PluginService
     */
    public static function do($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['Eccube\\Service\\PluginService'] = $container->createProxy('PluginServiceGhost98e28cc', static fn () => \PluginServiceGhost98e28cc::createLazyGhost(static fn ($proxy) => self::do($container, $proxy)));
        }

        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PluginService.php';

        return ($lazyLoad->__construct(($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container)), ($container->services['Eccube\\Repository\\PluginRepository'] ?? $container->load('getPluginRepositoryService')), ($container->privates['Eccube\\Service\\EntityProxyService'] ?? $container->load('getEntityProxyServiceService')), ($container->privates['Eccube\\Service\\SchemaService'] ?? $container->load('getSchemaServiceService')), ($container->services['Eccube\\Common\\EccubeConfig'] ?? self::getEccubeConfigService($container)), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Doctrine\\Common\\Persistence\\ManagerRegistry' => ['services', 'doctrine', 'getDoctrineService', false],
            'Doctrine\\ORM\\EntityManagerInterface' => ['services', 'doctrine.orm.default_entity_manager', 'getDoctrine_Orm_DefaultEntityManagerService', false],
            'Doctrine\\Persistence\\ManagerRegistry' => ['services', 'doctrine', 'getDoctrineService', false],
            'Eccube\\Common\\EccubeConfig' => ['services', 'Eccube\\Common\\EccubeConfig', 'getEccubeConfigService', false],
            'doctrine' => ['services', 'doctrine', 'getDoctrineService', false],
            'doctrine.orm.default_entity_manager' => ['services', 'doctrine.orm.default_entity_manager', 'getDoctrine_Orm_DefaultEntityManagerService', false],
            'doctrine.orm.entity_manager' => ['services', 'doctrine.orm.default_entity_manager', 'getDoctrine_Orm_DefaultEntityManagerService', false],
        ], [
            'Doctrine\\Common\\Persistence\\ManagerRegistry' => '?',
            'Doctrine\\ORM\\EntityManagerInterface' => '?',
            'Doctrine\\Persistence\\ManagerRegistry' => '?',
            'Eccube\\Common\\EccubeConfig' => '?',
            'doctrine' => '?',
            'doctrine.orm.default_entity_manager' => '?',
            'doctrine.orm.entity_manager' => '?',
        ]), ($container->privates['Eccube\\Util\\CacheUtil'] ?? $container->load('getCacheUtilService')), ($container->privates['Eccube\\Service\\Composer\\ComposerServiceInterface'] ?? $container->load('getComposerServiceInterfaceService')), ($container->privates['Eccube\\Service\\PluginApiService'] ?? $container->load('getPluginApiServiceService')), ($container->services['Eccube\\Service\\SystemService'] ?? self::getSystemServiceService($container)), ($container->privates['Eccube\\Service\\PluginContext'] ?? $container->load('getPluginContextService'))) && false ?: $lazyLoad);
    }
}
