<?php

namespace ContainerXhVx8uS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getEccube_Purchase_Flow_CartService extends Eccube_KernelProdContainer
{
    /*
     * Gets the private 'eccube.purchase.flow.cart' shared service.
     *
     * @return \Eccube\Service\PurchaseFlow\PurchaseFlow
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PurchaseFlow/PurchaseFlow.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PurchaseFlow/ValidatorTrait.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PurchaseFlow/ItemValidator.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PurchaseFlow/Processor/StockValidator.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PurchaseFlow/Processor/SaleLimitValidator.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PurchaseFlow/Processor/ProductStatusValidator.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PurchaseFlow/Processor/PriceChangeValidator.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PurchaseFlow/Processor/ClassCategoryValidator.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PurchaseFlow/ItemHolderPostValidator.php';
        include_once \dirname(__DIR__, 4).'/src/Eccube/Service/PurchaseFlow/Processor/PaymentTotalNegativeValidator.php';

        $container->privates['eccube.purchase.flow.cart'] = $instance = new \Eccube\Service\PurchaseFlow\PurchaseFlow();

        $instance->setFlowType('cart');
        $instance->addItemValidator(($container->privates['eccube.purchase.flow.item.validator.delivery.setting.validator'] ?? $container->load('getEccube_Purchase_Flow_Item_Validator_Delivery_Setting_ValidatorService')));
        $instance->addItemValidator(($container->privates['eccube.purchase.flow.item.validator.product.status.validator'] ??= new \Eccube\Service\PurchaseFlow\Processor\ProductStatusValidator()));
        $instance->addItemValidator(($container->privates['eccube.purchase.flow.item.validator.price.change.validator'] ??= new \Eccube\Service\PurchaseFlow\Processor\PriceChangeValidator()));
        $instance->addItemValidator(new \Eccube\Service\PurchaseFlow\Processor\StockValidator());
        $instance->addItemValidator(new \Eccube\Service\PurchaseFlow\Processor\SaleLimitValidator());
        $instance->addItemValidator(($container->privates['eccube.purchase.flow.item.validator.class_category.validator'] ??= new \Eccube\Service\PurchaseFlow\Processor\ClassCategoryValidator()));
        $instance->addItemHolderValidator(($container->privates['eccube.purchase.flow.item.holder.validator.empty.items.validator'] ?? $container->load('getEccube_Purchase_Flow_Item_Holder_Validator_Empty_Items_ValidatorService')));
        $instance->addItemHolderPostValidator(($container->privates['eccube.purchase.flow.item.holder.post.validator.payment.validator'] ?? $container->load('getEccube_Purchase_Flow_Item_Holder_Post_Validator_Payment_ValidatorService')));
        $instance->addItemHolderPostValidator(($container->privates['eccube.purchase.flow.item.holder.post.validator.payment.total.limit.validator'] ?? $container->load('getEccube_Purchase_Flow_Item_Holder_Post_Validator_Payment_Total_Limit_ValidatorService')));
        $instance->addItemHolderPostValidator(($container->privates['eccube.purchase.flow.item.holder.post.validator.total.negative.validator'] ??= new \Eccube\Service\PurchaseFlow\Processor\PaymentTotalNegativeValidator()));

        return $instance;
    }
}
