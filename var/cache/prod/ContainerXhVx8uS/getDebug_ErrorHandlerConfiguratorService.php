<?php

namespace ContainerXhVx8uS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDebug_ErrorHandlerConfiguratorService extends Eccube_KernelProdContainer
{
    /*
     * Gets the public 'debug.error_handler_configurator' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\ErrorHandlerConfigurator
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Debug/ErrorHandlerConfigurator.php';

        $a = new \Monolog\Logger('php');
        $a->pushProcessor(($container->privates['Eccube\\Log\\Processor\\SessionProcessor'] ?? self::getSessionProcessorService($container)));
        $a->pushProcessor(($container->privates['Eccube\\Log\\Processor\\TokenProcessor'] ?? self::getTokenProcessorService($container)));
        $a->pushProcessor(($container->privates['Monolog\\Processor\\UidProcessor'] ??= new \Monolog\Processor\UidProcessor()));
        $a->pushProcessor(($container->privates['Monolog\\Processor\\IntrospectionProcessor'] ??= new \Monolog\Processor\IntrospectionProcessor(100, ['Eccube\\\\Log', 'Psr\\\\Log'])));
        $a->pushProcessor(($container->privates['Symfony\\Bridge\\Monolog\\Processor\\WebProcessor'] ?? self::getWebProcessorService($container)));
        $a->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $a->pushHandler(($container->privates['monolog.handler.admin'] ?? self::getMonolog_Handler_AdminService($container)));
        $a->pushHandler(($container->privates['monolog.handler.front'] ?? self::getMonolog_Handler_FrontService($container)));
        $a->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));
        $a->pushHandler(($container->privates['monolog.handler.e_user_deprecated_filter'] ?? $container->load('getMonolog_Handler_EUserDeprecatedFilterService')));

        return $container->services['debug.error_handler_configurator'] = new \Symfony\Component\HttpKernel\Debug\ErrorHandlerConfigurator($a, NULL, 0, false, false, NULL);
    }
}
